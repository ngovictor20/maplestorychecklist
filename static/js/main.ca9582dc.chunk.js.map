{"version":3,"sources":["types.ts","redux/hooks.ts","config/checklists.ts","components/Dialog/types.ts","redux/stateSlice.ts","redux/helpers.ts","components/Dialog/AddCharacterDialog.tsx","components/Dialog/ConfirmDialog.tsx","components/Dialog/BaseDialog.tsx","components/Dialog/useDialog.tsx","components/Header.tsx","components/Character/CharacterCard.tsx","components/Character/CharacterList.tsx","components/Sidebar.tsx","components/Checklist/ChecklistItem.tsx","components/Checklist/SubChecklistItem.tsx","components/Checklist/SubChecklist.tsx","components/Checklist/ChecklistRenderer.tsx","components/ContentContainer.tsx","pages/AppRouter.tsx","redux/store.ts","App.tsx","index.tsx"],"names":["ChecklistType","Class","useAppDispatch","useDispatch","useAppSelector","useSelector","checklist","DialogType","initialState","dailyChecklist","shiftChecklist","weeklyBosses","characters","characterIndex","checklistType","stateSlice","createSlice","name","reducers","updateChecklist","state","action","payload","updateCharList","setChecklistType","addChar","push","localStorage","setItem","JSON","stringify","current","updateChecklistItem","field","setCharIndex","charName","storage","parse","getItem","isEmpty","getChecklistByCharacterName","resetDailyChecklists","forEach","character","currentChecklist","toString","checklistBase","resetChecklists","deleteCharacter","removeItem","splice","updateSubChecklist","data","actions","selectChecklist","selectChecklistType","selectCharacters","selectCharacterIndex","StyledForm","styled","div","AddPictureDialog","setDialogOpen","setIsLoading","setIsError","setErrorMsg","useState","setName","magician","job","setJob","level","setLevel","dispatch","className","type","maxLength","onChange","e","target","value","Object","keys","map","max","min","parseInt","onClick","class","ConfirmDialog","onConfirm","confirmMessage","BaseDialog","header","setHeader","charIndex","useEffect","addCharacter","deleteStorage","src","process","alt","AddCharacterDialog","clear","window","location","reload","informReset","renderContent","useDialog","dialogOpen","dialogType","setDialogType","toggleDialog","renderDialog","NavItemClass","Header","CharacterCard","index","selected","CharacterList","charList","list","currentDate","utcToZonedTime","Date","lastCheckedDate","resetDate","set","hours","minutes","seconds","milliseconds","lastLogin","getHours","isBefore","isWednesday","console","log","toISOString","checkIfLastVisitedExpired","char","key","SidebarContainer","Sidebar","ChecklistItem","checked","setChecked","SubChecklistItem","globalChecked","onChangeHandler","SubChecklist","label","allChecked","setAllChecked","mapValues","entries","ChecklistRenderer","ContentContainer","Container","MainPage","store","configureStore","reducer","App","AppRouter","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ca9582dc.chunk.js","sourcesContent":["interface Checklist {\r\n  [key: string]: boolean | Checklist;\r\n}\r\n\r\n\r\n\r\ninterface Character {\r\n  name: string;\r\n  class: Class;\r\n  level: number;\r\n}\r\n\r\nenum ChecklistType{\r\n  dailyChecklist = \"dailyChecklist\",\r\n  weeklyBosses = \"weeklyBosses\",\r\n  shiftChecklist = \"shiftChecklist\",\r\n}\r\n\r\ninterface FullChecklist {\r\n  dailyChecklist: Checklist;\r\n  weeklyBosses: Checklist;\r\n  shiftChecklist: Checklist;\r\n}\r\n\r\nenum Class {\r\n  magician = \"magician\",\r\n  thief = \"thief\",\r\n  warrior = \"warrior\",\r\n  bowman = \"bowman\",\r\n  pirate = \"pirate\",\r\n}\r\n\r\nexport type { Checklist, Character, FullChecklist };\r\nexport { Class, ChecklistType };\r\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux'\r\nimport { RootState, AppDispatch } from './store'\r\n\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>()\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector","import { FullChecklist } from \"types\";\r\n\r\nconst checklist: FullChecklist = {\r\n    \"dailyChecklist\": {\r\n        \"Arcane Dailies\": false,\r\n        \"Ursus\": false,\r\n        \"Maple Tour\": false,\r\n        \"Monster Park\": false,\r\n        \"Yu Garden\": false,\r\n        \"Gollux\": false,\r\n        \"Legion Quest\": false,\r\n        \"Bosses\": {\r\n            \"Zakum\": false,\r\n            \"Horntail\" : false,\r\n            \"Hila\": false,\r\n            \"Root Abyss\": false,\r\n            \"Von Leon\": false,\r\n            \"Arkarium\": false,\r\n            \"Magnus\": false,\r\n            \"Pink Bean\": false,\r\n            \"Ranmaru\": false,\r\n        },\r\n        \"Commerci\":{\r\n            \"Commerci PQ\": false,\r\n            \"Commerci Solo\": false\r\n        }\r\n    },\r\n    \"shiftChecklist\": {\r\n        \"Wealth Acquisition Potion\": false,\r\n        \"2x EXP\": false,\r\n        \"Legion\": false,\r\n        \"Familiars\": false,\r\n        \"Drop/Meso Gear\": false,\r\n        \"Wild Totem\": false,\r\n        \"Additional EXP Shit\": false,\r\n        \"Link Skill Review\": false,\r\n        \"Legion Board Review\": false,\r\n        \"Pets\": false\r\n    },\r\n    \"weeklyBosses\": {\r\n        \"Hard Magnus\": false,\r\n        \"Chaos Zakum\": false,\r\n        \"Hard Hila\": false,\r\n        \"Chao Pink Bean\": false,\r\n        \"Chaos Root Abyss\": {\r\n            \"Chaos Queen\": false,\r\n            \"Chaos Von Bon\": false,\r\n            \"Chaos Pierre\": false,\r\n            \"Chaos Vellum\": false,\r\n        },\r\n        \"Chaos Papulatus\": false,\r\n        \"Princess No\": false,\r\n        \"Akechi\": false,\r\n        \"Lotus\": false,\r\n        \"Damien\": false,\r\n        \"Lucid\": false,\r\n        \"Verus Hila\": false\r\n    }\r\n}\r\n\r\nexport default checklist;","export enum DialogType{\r\n    deleteCharacter,\r\n    addCharacter,\r\n    deleteStorage,\r\n    informReset\r\n}","import { createSlice, current, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport checklistBase from \"config/checklists\";\r\nimport { Character, Checklist, ChecklistType, FullChecklist } from \"types\";\r\nimport { getChecklistByCharacterName } from \"redux/helpers\";\r\nimport { RootState } from \"./store\";\r\nimport { ChecklistUpdateData, State, SubChecklistData } from \"./types\";\r\n\r\nconst initialState: State = {\r\n  checklist: {\r\n    dailyChecklist: {},\r\n    shiftChecklist: {},\r\n    weeklyBosses: {},\r\n  },\r\n  characters: [],\r\n  characterIndex: 0,\r\n  checklistType: ChecklistType.dailyChecklist,\r\n}\r\n\r\nexport const stateSlice = createSlice({\r\n  name: \"state\",\r\n  initialState: initialState,\r\n  reducers: {\r\n    updateChecklist: (state, action: PayloadAction<FullChecklist>) => {\r\n      state.checklist = action.payload;\r\n    },\r\n    updateCharList: (state, action: PayloadAction<Array<Character>>) => {\r\n      state.characters = action.payload;\r\n    },\r\n    setChecklistType: (state, action: PayloadAction<ChecklistType>) => {\r\n      state.checklistType = action.payload;\r\n    },\r\n    addChar: (state, action: PayloadAction<Character>) => {\r\n      state.characters.push(action.payload);\r\n      localStorage.setItem(\"characters\", JSON.stringify(current(state).characters));\r\n    },\r\n    updateChecklistItem: (state, action: PayloadAction<ChecklistUpdateData>) => {\r\n      const { field } = action.payload;\r\n      const { checklistType, characters, checklist, characterIndex } = state;\r\n      state.checklist[checklistType][field] = !checklist[checklistType][field];\r\n      localStorage.setItem(characters[characterIndex].name, JSON.stringify(current(state).checklist));\r\n    },\r\n    setCharIndex: (state, action: PayloadAction<number>) => {\r\n      const { name } = state.characters[action.payload]\r\n      state.checklist = getChecklistByCharacterName(name);\r\n      state.characterIndex = action.payload;\r\n    },\r\n    resetDailyChecklists: (state) => {\r\n      current(state).characters.forEach((character) => {\r\n        const currentChecklist = localStorage.getItem(character.name);\r\n        if (currentChecklist) {\r\n          const { weeklyBosses } = JSON.parse(currentChecklist.toString());\r\n          localStorage.setItem(character.name, JSON.stringify({ ...checklistBase, weeklyBosses }))\r\n        } else {\r\n          localStorage.setItem(character.name, JSON.stringify({ ...checklistBase }))\r\n        }\r\n      })\r\n    },\r\n    resetChecklists: (state) => {\r\n      const { characters } = current(state);\r\n      characters.forEach((character) => {\r\n        localStorage.setItem(character.name, JSON.stringify({ ...checklistBase }))\r\n      })\r\n    },\r\n    deleteCharacter: (state, action: PayloadAction<number>) => {\r\n      const { name } = state.characters[action.payload];\r\n      localStorage.removeItem(name);\r\n      state.characters.splice(action.payload, 1);\r\n      localStorage.setItem('characters', JSON.stringify(current(state).characters));\r\n    },\r\n    updateSubChecklist: (state, action: PayloadAction<SubChecklistData>) => {\r\n      state.checklist[state.checklistType][action.payload.field] = action.payload.data;\r\n      localStorage.setItem(state.characters[state.characterIndex].name, JSON.stringify(current(state).checklist));\r\n    }\r\n  },\r\n});\r\n\r\nexport const {\r\n  updateChecklist,\r\n  setCharIndex,\r\n  updateCharList,\r\n  addChar,\r\n  updateChecklistItem,\r\n  resetDailyChecklists,\r\n  resetChecklists,\r\n  setChecklistType,\r\n  deleteCharacter,\r\n  updateSubChecklist\r\n} = stateSlice.actions;\r\n\r\nexport const selectChecklist = (state: RootState) => state.checklist;\r\nexport const selectChecklistType = (state: RootState) => state.checklistType;\r\nexport const selectCharacters = (state: RootState) => state.characters;\r\nexport const selectCharacterIndex = (state: RootState) => state.characterIndex;\r\n\r\nexport default stateSlice.reducer;\r\n","import checklist from 'config/checklists';\r\nimport { isEmpty } from 'lodash';\r\n\r\nconst getChecklistByCharacterName = (charName: string) => {\r\n    const storage = JSON.parse(\r\n        //@ts-ignore\r\n        localStorage.getItem(charName)\r\n      );\r\n    if (!isEmpty(storage)) {\r\n        return storage;\r\n      } else {\r\n        localStorage.setItem(charName, JSON.stringify(checklist));\r\n        return checklist;\r\n      }\r\n}\r\n\r\n\r\nexport { getChecklistByCharacterName }","import React, { useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport { Class } from 'types';\r\nimport { addChar } from 'redux/stateSlice';\r\nimport { useAppDispatch } from 'redux/hooks';\r\n\r\ninterface DialogProps {\r\n    setDialogOpen: (arg: boolean) => void;\r\n    setIsLoading: (arg: boolean) => void;\r\n    setIsError: (arg: boolean) => void;\r\n    setErrorMsg: (arg: string) => void;\r\n}\r\n\r\nconst StyledForm = styled.div`\r\n    display: flex;\r\n    position: relative;\r\n    flex-direction: column; \r\n    width: 60%;\r\n    left: 50%;\r\n    transform: translate(-50%, 0%);\r\n`;\r\n\r\nconst AddPictureDialog: React.FC<DialogProps> = ({ setDialogOpen, setIsLoading, setIsError, setErrorMsg }) => {\r\n    const [name, setName] = useState(\"\");\r\n    const [job, setJob] = useState<Class>(Class.magician);\r\n    const [level, setLevel] = useState(0);\r\n    const dispatch = useAppDispatch();\r\n\r\n    return (\r\n        <StyledForm>\r\n            <label className=\"block\">\r\n                <span>Name</span>\r\n                <input type=\"text\" maxLength={12} onChange={(e) => { setName(e.target!.value) }} className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50\"></input>\r\n            </label>\r\n            <label className=\"block\">\r\n                <span>Class</span>\r\n                <select onChange={(e) => { setJob(Class[e.target!.value! as keyof typeof Class]) }} className=\"block w-full mt-1 rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50\">\r\n                    {\r\n                        Object.keys(Class).map((value) => {\r\n                            return (<option>{value}</option>)\r\n                        })\r\n                    }\r\n                </select>\r\n            </label>\r\n            <label className=\"block\">\r\n                <span>Number</span>\r\n                <input type=\"number\" max={300} min={0} onChange={(e) => {\r\n                    const value = parseInt(e.target.value);\r\n                    if (value > 300 || value < 0) {\r\n                        setLevel(0);\r\n                    } else {\r\n                        setLevel(value);\r\n                    }\r\n                    \r\n                }} value={level} className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50\" />\r\n            </label>\r\n            <button onClick={() => {\r\n                dispatch(addChar({ name, level, class: job }));\r\n                setDialogOpen(false);\r\n            }}\r\n                className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-full my-5\">\r\n                Add\r\n            </button>\r\n        </StyledForm>\r\n    )\r\n}\r\n\r\nexport default AddPictureDialog\r\n","import React  from 'react';\r\n\r\ninterface DialogProps {\r\n    setIsLoading?: (arg: boolean) => void;\r\n    setIsError?: (arg: boolean) => void;\r\n    setErrorMsg?: (arg: string) => void;\r\n    onConfirm: ()=>void;\r\n    confirmMessage: string;\r\n}\r\n\r\n\r\nconst ConfirmDialog: React.FC<DialogProps> = ({ setIsLoading, setIsError, setErrorMsg, onConfirm, confirmMessage }) => {\r\n    return (\r\n        <div className=\"flex flex-col relative px-12 h-full content-center\">\r\n            <p className=\"text-2xl self-center text-center\">\r\n                {confirmMessage}\r\n            </p>\r\n            <button onClick={onConfirm}\r\n                className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-full my-5 cursor-pointer\">\r\n                Confirm\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ConfirmDialog;\r\n","import React, { useEffect, useState } from 'react'\r\nimport AddCharacterDialog from 'components/Dialog/AddCharacterDialog';\r\nimport { DialogType } from 'components/Dialog/types';\r\nimport { deleteCharacter } from 'redux/stateSlice';\r\nimport { useAppDispatch, useAppSelector } from 'redux/hooks';\r\nimport ConfirmDialog from 'components/Dialog/ConfirmDialog';\r\n\r\ninterface DialogProps {\r\n    setDialogOpen: (arg: boolean) => void;\r\n    type: DialogType;\r\n}\r\n\r\n\r\nconst BaseDialog: React.FC<DialogProps> = ({ setDialogOpen, type }) => {\r\n    const [header, setHeader] = useState(\"Dialog\");\r\n    const [isError, setIsError] = useState(false);\r\n    const [errorMsg, setErrorMsg] = useState(\"\");\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const charIndex = useAppSelector(state => state.characterIndex);\r\n    const dispatch = useAppDispatch();\r\n\r\n    useEffect(() => {\r\n        switch (type) {\r\n            case DialogType.addCharacter:\r\n                setHeader(\"Add Character\");\r\n                break;\r\n            case DialogType.deleteCharacter | DialogType.deleteStorage:\r\n                setHeader(\"Confirm Action\");\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }, [type])\r\n\r\n    const renderContent = () => {\r\n        switch (type) {\r\n            case DialogType.addCharacter:\r\n                return <AddCharacterDialog setDialogOpen={setDialogOpen} setIsError={setIsError} setErrorMsg={setErrorMsg} setIsLoading={setIsLoading} />\r\n            case DialogType.deleteCharacter:\r\n                return <ConfirmDialog {...{\r\n                    confirmMessage: \"Are you sure you want to delete this character?\",\r\n                    onConfirm: () => {\r\n                        dispatch(deleteCharacter(charIndex));\r\n                        setDialogOpen(false);\r\n                    }\r\n                }} ></ConfirmDialog>\r\n            case DialogType.deleteStorage:\r\n                return <ConfirmDialog {...{\r\n                    confirmMessage: \"Are you sure you want to wipe your character data?\",\r\n                    onConfirm: () => {\r\n                        localStorage.clear();\r\n                        setDialogOpen(false);\r\n                        window.location.reload();\r\n                    }\r\n                }} ></ConfirmDialog>\r\n            case DialogType.informReset:\r\n                return <ConfirmDialog {...{\r\n                    confirmMessage: \"Your checklists have been reset!\",\r\n                    onConfirm: () => {\r\n                        setDialogOpen(false);\r\n                    }\r\n                }} />\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"fixed h-full w-screen z-50 inset-0 bg-gray-300 bg-opacity-75 flex justify-center items-center\" >\r\n            <span className=\"relative inset-0 flex flex-col bg-white max-w-1/2 min-w-1/4 max-h-full rounded-lg text-black\">\r\n                <p className=\"underline text-center h-18 text-2xl font-bold p-5\">{header}</p>\r\n                <img onClick={() => setDialogOpen(false)} src={`${process.env.PUBLIC_URL}/exit.svg`} className=\"absolute top-0 right-0 h-4 w-4 m-3 hover:bg-blue-200\" alt=\"exit\" />\r\n                {renderContent()}\r\n            </span>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default BaseDialog\r\n","import React, { useState } from 'react';\r\nimport BaseDialog from 'components/Dialog/BaseDialog';\r\nimport { DialogType } from './types';\r\n\r\n\r\nconst useDialog = () => {\r\n    const [dialogOpen, setDialogOpen] = useState(false);\r\n    const [dialogType, setDialogType] = useState<DialogType>(DialogType.deleteCharacter)\r\n    const renderDialog = () => {\r\n        return dialogOpen && <BaseDialog setDialogOpen={setDialogOpen} type={dialogType}></BaseDialog>\r\n    }\r\n    const toggleDialog = (type: DialogType)=>{\r\n        setDialogOpen(!dialogOpen);\r\n        setDialogType(type)\r\n    }\r\n    return (\r\n        {\r\n            toggleDialog, renderDialog\r\n        }\r\n    )\r\n}\r\n\r\nexport default useDialog\r\n","import React from 'react'\r\nimport { useAppDispatch } from 'redux/hooks';\r\nimport { setChecklistType } from 'redux/stateSlice';\r\nimport { ChecklistType } from 'types';\r\nimport useDialog from 'components/Dialog/useDialog';\r\nimport { DialogType } from './Dialog/types';\r\n\r\nconst NavItemClass = \"hover:bg-accent-grey h-full cursor-pointer px-3 flex items-center\";\r\n\r\nconst Header = () => {\r\n    const dispatch = useAppDispatch();\r\n    const { renderDialog, toggleDialog } = useDialog();\r\n    return (\r\n        <div className=\"fixed top-0 z-30 h-20 px-36 flex-1 min-w-full flex container bg-header-grey text-white justify-between\">\r\n            {renderDialog()}\r\n            <div className=\"flex items-center \">\r\n                <img src={`${process.env.PUBLIC_URL}/maplestory-icon.png`} alt=\"Icon\" className=\"w-12 h-12\" />\r\n                <p className=\"text-2xl\">\r\n                    Maplelist\r\n                </p>\r\n            </div>\r\n            <div className=\"flex justify space-x-2 h-full text-xl text-white \">\r\n                <div onClick={() => { dispatch(setChecklistType(ChecklistType.dailyChecklist)) }} className={NavItemClass}>\r\n                    <p>Dailies</p>\r\n                </div>\r\n                <div onClick={() => { dispatch(setChecklistType(ChecklistType.weeklyBosses)) }} className={NavItemClass}>\r\n                    <p>Weeklies</p>\r\n                </div>\r\n                <div onClick={() => { dispatch(setChecklistType(ChecklistType.shiftChecklist)) }} className={NavItemClass}>\r\n                    <p>Shift</p>\r\n                </div>\r\n                <div onClick={() => {\r\n                    toggleDialog(DialogType.deleteStorage);\r\n                }} className={NavItemClass}>\r\n                    <p>Clear Data</p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","import React from 'react'\r\nimport { useAppDispatch } from 'redux/hooks';\r\nimport { setCharIndex } from 'redux/stateSlice';\r\nimport { Class } from 'types'\r\nimport { DialogType } from 'components/Dialog/types';\r\ninterface CharacterProps {\r\n    name: string;\r\n    className: Class;\r\n    level: number;\r\n    index: number;\r\n    selected?: boolean;\r\n    toggleDialog: (type: DialogType) => void;\r\n}\r\n\r\n\r\nconst CharacterCard: React.FC<CharacterProps> = ({ className, level, name, index, selected, toggleDialog }) => {\r\n    const dispatch = useAppDispatch();\r\n\r\n    return (\r\n        <div className={`relative cursor-pointer border-accent-grey border-2 shadow-lg flex items-center w-44 h-20 rounded-md hover:ring-2 focus:ring-gray-300 ${selected ? \"ring ring-gray-300 ring-offset-1\" : \"\"}`} onClick={() => dispatch(setCharIndex(index))}>\r\n            <img className=\" w-12 h-12 m-2 rounded-full ring-1\" src={`${process.env.PUBLIC_URL}/${Class[className]}.svg`} alt={`${Class[className]}`} />\r\n            <div className=\"pr-2\">\r\n                <p>{name}</p>\r\n                <p>{level}</p>\r\n            </div>\r\n            <img onClick={() => { toggleDialog(DialogType.deleteCharacter) }} src={`${process.env.PUBLIC_URL}/exit.svg`} className={`absolute top-0 right-0 h-2 w-2 m-1 hover:bg-blue-200 ${selected ? \"\" : \"\"}`} alt=\"exit\"/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CharacterCard\r\n","import React, { useEffect, useState } from 'react';\r\nimport { updateCharList, resetDailyChecklists, resetChecklists, selectCharacters, selectCharacterIndex } from 'redux/stateSlice';\r\nimport { useAppSelector, useAppDispatch } from 'redux/hooks';\r\nimport { isEmpty } from 'lodash';\r\nimport useDialog from 'components/Dialog/useDialog';\r\nimport CharacterCard from 'components/Character/CharacterCard';\r\nimport { DialogType } from 'components/Dialog/types';\r\nimport { utcToZonedTime } from 'date-fns-tz';\r\nimport { getHours, isWednesday, set, isBefore } from 'date-fns';\r\n\r\nconst CharacterList: React.FC = () => {\r\n    const charList = useAppSelector(selectCharacters);\r\n    const charIndex = useAppSelector(selectCharacterIndex);\r\n    const dispatch = useAppDispatch();\r\n    const { renderDialog, toggleDialog } = useDialog();\r\n\r\n    const checkIfLastVisitedExpired = () => {\r\n        const currentDate = utcToZonedTime(new Date(), \"America/New_York\")\r\n        const lastCheckedDate = localStorage.getItem(\"lastVisited\");\r\n        if (lastCheckedDate) {\r\n            const resetDate = set(currentDate, {hours: 19, minutes: 0, seconds:0, milliseconds: 0}); //19 0 0 0\r\n            const lastLogin = utcToZonedTime(lastCheckedDate!.toString(), \"America/New_York\");\r\n            if (getHours(currentDate) >= 19 && isBefore(lastLogin, resetDate)) {\r\n                if (isWednesday(currentDate)) {\r\n                    dispatch(resetChecklists());\r\n                    console.log(\"Weekly Reset Triggered\")\r\n                } else {\r\n                    dispatch(resetDailyChecklists());\r\n                    console.log(\"Daily Reset Triggered\");\r\n                }\r\n                toggleDialog(DialogType.informReset);\r\n            }\r\n        }\r\n        localStorage.setItem(\"lastVisited\", currentDate.toISOString());\r\n    }\r\n\r\n    useEffect(() => {\r\n        const list = localStorage.getItem(\"characters\");\r\n        if (!isEmpty(list)) {\r\n            dispatch(updateCharList(JSON.parse(list!.toString())))\r\n        }\r\n        checkIfLastVisitedExpired(); //ADD DIALOG POPUP IF RESET\r\n    }, [])\r\n\r\n    return (\r\n        <div className=\"\">\r\n            {renderDialog()}\r\n            <div className=\"flex flex-col items-center py-5 gap-y-6\">\r\n                {charList && charList.map((char, index) => (\r\n                    <CharacterCard {...{ index, name: char.name, className: char.class, level: char.level, selected: index === charIndex, toggleDialog }} key={char.name} />\r\n                ))}\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CharacterList\r\n","import React from 'react'\r\nimport CharacterList from 'components/Character/CharacterList'\r\nimport useDialog from 'components/Dialog/useDialog';\r\nimport { DialogType } from 'components/Dialog/types';\r\nimport styled from 'styled-components';\r\n\r\nconst SidebarContainer = styled.div`\r\n    height: calc(100vh - 5rem);\r\n`;\r\n\r\nconst Sidebar = () => {\r\n    const { renderDialog, toggleDialog } = useDialog();\r\n    return (\r\n        <SidebarContainer className=\"border-r-2 border-accent-grey bottom-0 w-full left-0 relative shadow-xl flex flex-col items-center text-header-grey\">\r\n            {renderDialog()}\r\n            <div className=\"pt-6\">\r\n                <CharacterList />\r\n            </div>\r\n            <div onClick={() => { toggleDialog(DialogType.addCharacter) }} className=\"hover:bg-accent-grey hover:text-white absolute bottom-2 w-4/5 h-14 text-center flex items-center justify-center cursor-pointer p-2 border-2 border-accent-grey rounded-md\">\r\n                <p>Add Character</p>\r\n            </div>\r\n        </SidebarContainer>\r\n    )\r\n}\r\n\r\nexport default Sidebar\r\n","import React, { useEffect, useState } from 'react'\r\nimport { updateChecklistItem } from 'redux/stateSlice';\r\nimport { useAppDispatch } from 'redux/hooks';\r\ninterface ChecklistItemProps {\r\n    field: string;\r\n    value: boolean;\r\n}\r\n\r\nconst ChecklistItem: React.FC<ChecklistItemProps> = ({ field, value }) => {\r\n    const [checked, setChecked] = useState(false);\r\n    const dispatch = useAppDispatch();\r\n\r\n    useEffect(() => {\r\n        setChecked(value);\r\n    }, [value])\r\n    return (\r\n        <div key={field}>\r\n            <label className=\"inline-flex items-center h-8 cursor-pointer\">\r\n            <input type=\"checkbox\" className=\"rounded text-pink-500\" checked={checked} onChange={(e) => {\r\n                setChecked(e.target.checked);\r\n                dispatch(updateChecklistItem({field}));\r\n            }} />\r\n            <span className=\"ml-2\">{field}</span>\r\n            </label>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ChecklistItem\r\n","import React, { useEffect, useState } from 'react'\r\n\r\ninterface SubChecklistProps {\r\n    field: string;\r\n    value: boolean;\r\n    globalChecked: boolean;\r\n    onChangeHandler: (field: string, value: boolean) => void;\r\n}\r\n\r\nconst SubChecklistItem: React.FC<SubChecklistProps> = ({ field, globalChecked, value, onChangeHandler }) => {\r\n    const [checked, setChecked] = useState(false);\r\n\r\n    useEffect(() => {\r\n        setChecked(globalChecked);\r\n    }, [globalChecked])\r\n\r\n    useEffect(() => {\r\n        setChecked(value);\r\n    }, [value])\r\n    return (\r\n        <div>\r\n            <label className=\"inline-flex items-center h-8 cursor-pointer\">\r\n                <input type=\"checkbox\" className=\"rounded text-pink-500\" checked={checked} onChange={(e) => {\r\n                    console.log(e.target.checked)\r\n                    setChecked(e.target.checked);\r\n                    onChangeHandler(field, e.target.checked);\r\n                }} />\r\n                <span className=\"ml-2\">{field}</span>\r\n            </label>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SubChecklistItem\r\n","import React, { useState } from 'react'\r\nimport { Checklist } from 'types'\r\nimport SubChecklistItem from 'components/Checklist/SubChecklistItem';\r\nimport { useAppDispatch } from 'redux/hooks';\r\nimport { updateSubChecklist } from 'redux/stateSlice';\r\nimport { mapValues } from 'lodash';\r\ninterface ChecklistProps {\r\n    label: string;\r\n    checklist: Checklist;\r\n}\r\n\r\nconst SubChecklist: React.FC<ChecklistProps> = ({ checklist, label }) => {\r\n    const [allChecked, setAllChecked] = useState(false);\r\n    const dispatch = useAppDispatch();\r\n    const onChangeHandler = (field: string, value: boolean) => {\r\n        console.log(\"On change: \", field, value);\r\n        dispatch(updateSubChecklist({ field: label, data: { ...checklist, [field]: value } }));\r\n    }\r\n\r\n    const changeAllFields = (value: boolean) => {\r\n        console.log(\"Change all\")\r\n        dispatch(updateSubChecklist({ field: label, data: mapValues(checklist, () => value) }));\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <label className=\"inline-flex items-center h-8 cursor-pointer\">\r\n                <input type=\"checkbox\" className=\"rounded text-pink-500\" checked={allChecked} onChange={(e) => {\r\n                    setAllChecked(e.target.checked);\r\n                    changeAllFields(e.target.checked);\r\n                }} />\r\n                <span className=\"ml-2\">{label}</span>\r\n            </label>\r\n            <div className=\"ml-10\">\r\n                {\r\n                    Object.entries(checklist).map(([field, value]) => {\r\n                        if (typeof value === 'boolean') {\r\n                            return <SubChecklistItem {...{ field, value, globalChecked: allChecked, onChangeHandler }} key={field} />\r\n                        } else {\r\n                            return undefined;\r\n                        }\r\n                    })\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\ninterface ChecklistProps {\r\n    checklist: Checklist;\r\n}\r\n\r\nexport default SubChecklist\r\n","import React from 'react';\r\nimport ChecklistItem from 'components/Checklist/ChecklistItem';\r\nimport SubChecklist from 'components/Checklist/SubChecklist';\r\nimport { useAppSelector } from 'redux/hooks';\r\nimport { selectChecklist, selectChecklistType } from 'redux/stateSlice';\r\n\r\n\r\n\r\nconst ChecklistRenderer: React.FC = () => {\r\n    const checklistType = useAppSelector(selectChecklistType);\r\n    const checklist = useAppSelector(selectChecklist);\r\n    return (\r\n        <div className=\"container w-full flex flex-col text-lg\">\r\n            {\r\n                Object.entries(checklist[checklistType]).map(([field, value]) => {\r\n                    if (typeof value !== 'boolean') {\r\n                        return <SubChecklist label={field} checklist={value} key={field} />\r\n                    } else {\r\n                        return (\r\n                            <ChecklistItem {...{ field, value }} key={field} />\r\n                        )\r\n                    }\r\n\r\n                })\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ChecklistRenderer\r\n","import React from 'react'\r\nimport ChecklistRenderer from 'components/Checklist/ChecklistRenderer'\r\n\r\nconst ContentContainer = () => {\r\n    return (\r\n        <div className=\"py-10 px-20\">\r\n            \r\n            <ChecklistRenderer />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ContentContainer\r\n","import React from 'react'\r\nimport Header from 'components/Header';\r\nimport Sidebar from 'components/Sidebar';\r\nimport styled from 'styled-components';\r\nimport ContentContainer from 'components/ContentContainer';\r\n\r\nconst Container = styled.div`\r\n    display: grid;\r\n    grid-template-columns: 12.5% auto; \r\n    width: 100vw;\r\n`;\r\n\r\nconst MainPage = () => {\r\n    return (\r\n        <div className=\"h-screen\">\r\n            <Header />\r\n            <Container className=\"pt-20\">\r\n                <Sidebar />\r\n                <ContentContainer/>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\nexport default MainPage;\r\n","import { configureStore } from '@reduxjs/toolkit'\r\nimport stateSlice from 'redux/stateSlice'\r\n\r\n\r\nconst store = configureStore({\r\n  reducer: stateSlice\r\n})\r\n\r\n// Infer the `RootState` and `AppDispatch` types from the store itself\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppDispatch = typeof store.dispatch;\r\nexport default store;\r\n","import AppRouter from \"pages/AppRouter\";\r\nimport { Provider } from 'react-redux';\r\nimport store from 'redux/store';\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <Provider store={store}>\r\n        <AppRouter />\r\n      </Provider>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom'\r\nimport App from 'App';\r\nimport 'styles/base.css';\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}