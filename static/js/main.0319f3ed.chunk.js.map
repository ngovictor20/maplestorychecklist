{"version":3,"sources":["types.ts","pages/LandingPage.tsx","config/checklists.ts","redux/stateSlice.ts","components/Dialog/types.ts","redux/hooks.ts","components/Checklist/ChecklistItem.tsx","components/Checklist/SubChecklistItem.tsx","components/Checklist/SubChecklist.tsx","components/Checklist/ChecklistRenderer.tsx","pages/DailiesPage.tsx","pages/WeekliesPage.tsx","components/Dialog/AddCharacterDialog.tsx","components/Dialog/ConfirmDialog.tsx","components/Dialog/BaseDialog.tsx","components/Dialog/useDialog.tsx","components/Header.tsx","components/CharacterCard.tsx","components/CharacterList.tsx","pages/ShiftPage.tsx","components/AppRouter.tsx","redux/store.ts","App.tsx","index.tsx"],"names":["ChecklistType","Class","LandingPage","className","checklist","DialogType","initialState","dailyChecklist","shiftChecklist","weeklyBosses","characters","characterIndex","checklistType","stateSlice","createSlice","name","reducers","updateChecklist","state","action","payload","updateCharList","addChar","push","console","log","current","localStorage","setItem","JSON","stringify","updateChecklistItem","field","setCharIndex","storage","parse","getItem","isEmpty","resetDailyChecklists","forEach","character","dailyList","resetWeeklyChecklists","weeklyList","setChecklistType","deleteCharacter","removeItem","splice","updateSubChecklist","data","actions","useAppDispatch","useDispatch","useAppSelector","useSelector","ChecklistItem","value","useState","checked","setChecked","dispatch","useEffect","type","onChange","e","target","SubChecklistItem","globalChecked","onChangeHandler","SubChecklist","label","allChecked","setAllChecked","mapValues","Object","entries","map","key","ChecklistRenderer","DailiesPage","WeekliesPage","StyledForm","styled","div","AddPictureDialog","setDialogOpen","setIsLoading","setIsError","setErrorMsg","setName","magician","job","setJob","level","setLevel","maxLength","keys","max","min","parseInt","onClick","class","ConfirmDialog","onConfirm","confirmMessage","BaseDialog","header","setHeader","charIndex","addCharacter","deleteStorage","src","process","alt","AddCharacterDialog","clear","window","location","reload","renderContent","useDialog","dialogOpen","dialogType","setDialogType","toggleDialog","renderDialog","Header","width","CharacterCard","index","selected","CharacterList","charList","loginDate","Date","lastCheckedDate","getHours","getDay","toISOString","checkIfLastVisitedExpired","list","toString","char","ShiftPage","AppRouter","renderPage","store","configureStore","reducer","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0319f3ed.chunk.js","sourcesContent":["interface Checklist {\r\n  [key: string]: boolean | Checklist;\r\n}\r\n\r\n\r\n\r\ninterface Character {\r\n  name: string;\r\n  class: Class;\r\n  level: number;\r\n}\r\n\r\nenum ChecklistType{\r\n  dailyChecklist = \"dailyChecklist\",\r\n  weeklyBosses = \"weeklyBosses\",\r\n  shiftChecklist = \"shiftChecklist\",\r\n}\r\n\r\ninterface FullChecklist {\r\n  dailyChecklist: Checklist;\r\n  weeklyBosses: Checklist;\r\n  shiftChecklist: Checklist;\r\n}\r\n\r\nenum Class {\r\n  magician = \"magician\",\r\n  thief = \"thief\",\r\n  warrior = \"warrior\",\r\n  bowman = \"bowman\",\r\n  pirate = \"pirate\",\r\n}\r\n\r\nexport type { Checklist, Character, FullChecklist };\r\nexport { Class, ChecklistType };\r\n","import React from 'react'\r\n\r\nconst LandingPage = () => {\r\n    return (\r\n        <div className=\"text-center\">\r\n            <h1 className=\"text-4xl\">\r\n                Add a Character!\r\n            </h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LandingPage\r\n","import { FullChecklist } from \"types\";\r\n\r\nconst checklist: FullChecklist = {\r\n    \"dailyChecklist\": {\r\n        \"Arcane Dailies\": false,\r\n        \"Ursus\": false,\r\n        \"Maple Tour\": false,\r\n        \"Monster Park\": false,\r\n        \"Yu Garden\": false,\r\n        \"Gollux\": false,\r\n        \"Legion Quest\": false,\r\n        \"Bosses\": {\r\n            \"Zakum\": false,\r\n            \"Horntail\" : false,\r\n            \"Hila\": false,\r\n            \"Root Abyss\": false,\r\n            \"Von Leon\": false,\r\n            \"Arkarium\": false,\r\n            \"Magnus\": false,\r\n            \"Pink Bean\": false,\r\n            \"Ranmaru\": false,\r\n        },\r\n        \"Commerci\":{\r\n            \"Commerci PQ\": false,\r\n            \"Commerci Solo\": false\r\n        }\r\n    },\r\n    \"shiftChecklist\": {\r\n        \"WAP\": false,\r\n        \"2x\": false,\r\n        \"Legion\": false,\r\n        \"Familiars\": false,\r\n        \"Drop/Meso Gear\": false,\r\n        \"Wild Totem\": false,\r\n        \"Additional EXP Shit\": false,\r\n        \"Link Skill Review\": false,\r\n        \"Legion Board Review\": false,\r\n        \"Pets\": false\r\n    },\r\n    \"weeklyBosses\": {\r\n        \"HMag\": false,\r\n        \"CZak\": false,\r\n        \"HHila\": false,\r\n        \"CBean\": false,\r\n        \"CRA\": false,\r\n        \"CPap\": false,\r\n        \"Princess No\": false,\r\n        \"Akechi\": false,\r\n        \"Lotus\": false,\r\n        \"Damien\": false,\r\n        \"Lucid\": false,\r\n        \"VHila\": false\r\n    }\r\n}\r\n\r\nexport default checklist;","import { createSlice, current, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport checklist from \"config/checklists\";\r\nimport { isEmpty } from \"lodash\";\r\nimport { Character, Checklist, ChecklistType, FullChecklist } from \"types\";\r\nimport { RootState } from \"./store\";\r\n\r\ninterface IState {\r\n  characters: Array<Character>;\r\n  characterIndex: number;\r\n  checklist: FullChecklist;\r\n  checklistType: ChecklistType;\r\n}\r\n\r\ninterface checklistUpdateData {\r\n  field: string;\r\n}\r\n\r\ninterface subchecklistData{\r\n  field: string;\r\n  data: Checklist;\r\n}\r\n\r\nconst initialState: IState = {\r\n  checklist: {\r\n    dailyChecklist: {},\r\n    shiftChecklist: {},\r\n    weeklyBosses: {},\r\n  },\r\n  characters: [],\r\n  characterIndex: 0,\r\n  checklistType: ChecklistType.dailyChecklist,\r\n}\r\n\r\nexport const stateSlice = createSlice({\r\n  name: \"state\",\r\n  initialState: initialState,\r\n  reducers: {\r\n    updateChecklist: (state, action: PayloadAction<FullChecklist>) => {\r\n      state.checklist = action.payload;\r\n    },\r\n    updateCharList: (state, action: PayloadAction<Array<Character>>) => {\r\n      state.characters = action.payload;\r\n    },\r\n    addChar: (state, action: PayloadAction<Character>) => {\r\n      state.characters.push(action.payload);\r\n      console.log(current(state).characters);\r\n      localStorage.setItem(\"characters\", JSON.stringify(current(state).characters));\r\n    },\r\n    updateChecklistItem: (state, action: PayloadAction<checklistUpdateData>) => {\r\n      state.checklist[state.checklistType][action.payload.field] = !state.checklist[state.checklistType][action.payload.field];\r\n      localStorage.setItem(state.characters[state.characterIndex].name, JSON.stringify(current(state).checklist));\r\n    },\r\n    setCharIndex: (state, action: PayloadAction<number>) => {\r\n      const storage = JSON.parse(\r\n        //@ts-ignore\r\n        localStorage.getItem(state.characters[action.payload].name)\r\n      );\r\n      if (!isEmpty(storage)) {\r\n        state.checklist = storage;\r\n        console.log(current(state).checklist)\r\n      } else {\r\n        localStorage.setItem(state.characters[action.payload].name, JSON.stringify(checklist));\r\n        state.checklist = checklist;\r\n      }\r\n      state.characterIndex = action.payload;\r\n    },\r\n    resetDailyChecklists: (state) => {\r\n      state.characters.forEach((character) => {\r\n        const dailyList = checklist.dailyChecklist;\r\n        localStorage.setItem(character.name, JSON.stringify({ ...checklist, dailyChecklist: dailyList }))\r\n      })\r\n    },\r\n    resetWeeklyChecklists: (state) => {\r\n      state.characters.forEach((character) => {\r\n        const weeklyList = checklist.weeklyBosses;\r\n        const dailyList = checklist.dailyChecklist;\r\n        localStorage.setItem(character.name, JSON.stringify({ ...checklist, weeklyBosses: weeklyList, dailyChecklist: dailyList }))\r\n      })\r\n    },\r\n    setChecklistType: (state, action: PayloadAction<ChecklistType>) => {\r\n      state.checklistType = action.payload;\r\n    },\r\n    deleteCharacter: (state, action: PayloadAction<number>) => {\r\n      const character = state.characters[action.payload];\r\n      localStorage.removeItem(character.name);\r\n      state.characters.splice(action.payload, 1);\r\n      localStorage.setItem('characters', JSON.stringify(current(state).characters));\r\n    },\r\n    updateSubChecklist: (state, action: PayloadAction<subchecklistData>)=>{\r\n      console.log(\"update checklist sub\");\r\n      console.log(action.payload.data, action.payload.field)\r\n      state.checklist[state.checklistType][action.payload.field] = action.payload.data;\r\n      localStorage.setItem(state.characters[state.characterIndex].name,JSON.stringify(current(state).checklist));\r\n    }\r\n  },\r\n});\r\n\r\nexport const {\r\n  updateChecklist,\r\n  setCharIndex,\r\n  updateCharList,\r\n  addChar,\r\n  updateChecklistItem,\r\n  resetDailyChecklists,\r\n  resetWeeklyChecklists,\r\n  setChecklistType,\r\n  deleteCharacter,\r\n  updateSubChecklist\r\n} = stateSlice.actions;\r\n\r\nexport const selectChecklist = (state: RootState) => state.checklist;\r\nexport const selectCharacters = (state: RootState) => state.characters;\r\nexport const selectCharacterIndex = (state: RootState) => state.characterIndex;\r\n\r\nexport default stateSlice.reducer;\r\n","export enum DialogType{\r\n    deleteCharacter,\r\n    addCharacter,\r\n    deleteStorage,\r\n}","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux'\r\nimport { RootState, AppDispatch } from './store'\r\n\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>()\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector","import React, { useEffect, useState } from 'react'\r\nimport { updateChecklistItem } from 'redux/stateSlice';\r\nimport { useAppDispatch } from 'redux/hooks';\r\ninterface ChecklistItemProps {\r\n    field: string;\r\n    value: boolean;\r\n}\r\n\r\nconst ChecklistItem: React.FC<ChecklistItemProps> = ({ field, value }) => {\r\n    const [checked, setChecked] = useState(false);\r\n    const dispatch = useAppDispatch();\r\n\r\n    useEffect(() => {\r\n        setChecked(value);\r\n    }, [value])\r\n    return (\r\n        <div key={field}>\r\n            <label className=\"inline-flex items-center h-8 cursor-pointer\">\r\n            <input type=\"checkbox\" className=\"rounded text-pink-500\" checked={checked} onChange={(e) => {\r\n                setChecked(e.target.checked);\r\n                dispatch(updateChecklistItem({field}));\r\n            }} />\r\n            <span className=\"ml-2\">{field}</span>\r\n            </label>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ChecklistItem\r\n","import React, { useEffect, useState } from 'react'\r\n\r\ninterface SubChecklistProps {\r\n    field: string;\r\n    value: boolean;\r\n    globalChecked: boolean;\r\n    onChangeHandler: (field: string, value: boolean) => void;\r\n}\r\n\r\nconst SubChecklistItem: React.FC<SubChecklistProps> = ({ field, globalChecked, value, onChangeHandler }) => {\r\n    const [checked, setChecked] = useState(false);\r\n\r\n    useEffect(() => {\r\n        setChecked(globalChecked);\r\n    }, [globalChecked])\r\n\r\n    useEffect(() => {\r\n        setChecked(value);\r\n    }, [value])\r\n    return (\r\n        <div>\r\n            <label className=\"inline-flex items-center h-8 cursor-pointer\">\r\n                <input type=\"checkbox\" className=\"rounded text-pink-500\" checked={checked} onChange={(e) => {\r\n                    console.log(e.target.checked)\r\n                    setChecked(e.target.checked);\r\n                    onChangeHandler(field, e.target.checked);\r\n                }} />\r\n                <span className=\"ml-2\">{field}</span>\r\n            </label>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SubChecklistItem\r\n","import React, { useState } from 'react'\r\nimport { Checklist } from 'types'\r\nimport SubChecklistItem from 'components/Checklist/SubChecklistItem';\r\nimport { useAppDispatch } from 'redux/hooks';\r\nimport { updateSubChecklist } from 'redux/stateSlice';\r\nimport { mapValues } from 'lodash';\r\ninterface ChecklistProps {\r\n    label: string;\r\n    checklist: Checklist;\r\n}\r\n\r\nconst SubChecklist: React.FC<ChecklistProps> = ({ checklist, label }) => {\r\n    const [allChecked, setAllChecked] = useState(false);\r\n    const dispatch = useAppDispatch();\r\n    const onChangeHandler = (field: string, value: boolean) => {\r\n        console.log(\"On change: \", field, value);\r\n        dispatch(updateSubChecklist({ field: label, data: { ...checklist, [field]: value } }));\r\n    }\r\n\r\n    const changeAllFields = (value:boolean) => {\r\n        console.log(\"Change all\")\r\n        dispatch(updateSubChecklist({ field: label, data: mapValues(checklist, () => value) }));\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <label className=\"inline-flex items-center h-8 cursor-pointer\">\r\n                <input type=\"checkbox\" className=\"rounded text-pink-500\" checked={allChecked} onChange={(e) => {\r\n                    setAllChecked(e.target.checked);\r\n                    changeAllFields(e.target.checked);\r\n                }} />\r\n                <span className=\"ml-2\">{label}</span>\r\n            </label>\r\n            <div className=\"ml-10\">\r\n                {\r\n                    Object.entries(checklist).map(([field, value]) => {\r\n                        if (typeof value === 'boolean') {\r\n                            return <SubChecklistItem {...{ field, value, globalChecked: allChecked, onChangeHandler  }} key={field} />\r\n                        } else {\r\n                            return undefined;\r\n                        }\r\n                    })\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\ninterface ChecklistProps {\r\n    checklist: Checklist;\r\n}\r\n\r\nexport default SubChecklist\r\n","import React from 'react';\r\nimport { Checklist } from 'types';\r\nimport ChecklistItem from 'components/Checklist/ChecklistItem';\r\nimport SubChecklist from './SubChecklist';\r\n\r\ninterface ChecklistProps {\r\n    checklist: Checklist;\r\n}\r\n\r\n\r\nconst ChecklistRenderer: React.FC<ChecklistProps> = ({ checklist }) => {\r\n    return (\r\n        <div className=\"container w-full flex flex-col text-lg\">\r\n            {\r\n                Object.entries(checklist).map(([field, value]) => {\r\n                    if(typeof value !== 'boolean'){\r\n                        return <SubChecklist label= {field} checklist={value} key={field}/>\r\n                    }else{\r\n                        return (\r\n                            <ChecklistItem {...{field,value}} key={field}/>\r\n                        )\r\n                    }\r\n                    \r\n                })\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ChecklistRenderer\r\n","import React from 'react'\r\nimport ChecklistRenderer from 'components/Checklist/ChecklistRenderer';\r\nimport {useAppSelector, useAppDispatch} from 'redux/hooks';\r\n\r\nconst DailiesPage = () => {\r\n    const { dailyChecklist } = useAppSelector(state=>state.checklist);\r\n\r\n    return (\r\n        <div>\r\n            <ChecklistRenderer checklist={dailyChecklist}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DailiesPage\r\n","import React from 'react'\r\nimport ChecklistRenderer from 'components/Checklist/ChecklistRenderer';\r\nimport { useAppSelector } from 'redux/hooks';\r\n\r\nconst WeekliesPage = () => {\r\n    const {weeklyBosses} = useAppSelector(state=>state.checklist);\r\n    return (\r\n        <div>\r\n             <ChecklistRenderer checklist={weeklyBosses}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default WeekliesPage\r\n","import React, { useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport { Class } from 'types';\r\nimport { addChar } from 'redux/stateSlice';\r\nimport { useAppDispatch } from 'redux/hooks';\r\n\r\ninterface DialogProps {\r\n    setDialogOpen: (arg: boolean) => void;\r\n    setIsLoading: (arg: boolean) => void;\r\n    setIsError: (arg: boolean) => void;\r\n    setErrorMsg: (arg: string) => void;\r\n}\r\n\r\nconst StyledForm = styled.div`\r\n    display: flex;\r\n    position: relative;\r\n    flex-direction: column; \r\n    width: 60%;\r\n    left: 50%;\r\n    transform: translate(-50%, 0%);\r\n`;\r\n\r\nconst AddPictureDialog: React.FC<DialogProps> = ({ setDialogOpen, setIsLoading, setIsError, setErrorMsg }) => {\r\n    const [name, setName] = useState(\"\");\r\n    const [job, setJob] = useState<Class>(Class.magician);\r\n    const [level, setLevel] = useState(0);\r\n    const dispatch = useAppDispatch();\r\n\r\n    return (\r\n        <StyledForm>\r\n            <label className=\"block\">\r\n                <span>Name</span>\r\n                <input type=\"text\" maxLength={12} onChange={(e) => { setName(e.target!.value) }} className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50\"></input>\r\n            </label>\r\n            <label className=\"block\">\r\n                <span>Class</span>\r\n                <select onChange={(e) => { setJob(Class[e.target!.value! as keyof typeof Class]) }} className=\"block w-full mt-1 rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50\">\r\n                    {\r\n                        Object.keys(Class).map((value) => {\r\n                            return (<option>{value}</option>)\r\n                        })\r\n                    }\r\n                </select>\r\n            </label>\r\n            <label className=\"block\">\r\n                <span>Number</span>\r\n                <input type=\"number\" max={300} min={0} onChange={(e) => {\r\n                    const value = parseInt(e.target.value);\r\n                    if (value > 300 || value < 0) {\r\n                        setLevel(0);\r\n                    } else {\r\n                        setLevel(value);\r\n                    }\r\n                    \r\n                }} value={level} className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50\" />\r\n            </label>\r\n            <button onClick={() => {\r\n                dispatch(addChar({ name, level, class: job }));\r\n                setDialogOpen(false);\r\n            }}\r\n                className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-full my-5\">\r\n                Add\r\n            </button>\r\n        </StyledForm>\r\n    )\r\n}\r\n\r\nexport default AddPictureDialog\r\n","import React  from 'react';\r\n\r\ninterface DialogProps {\r\n    setIsLoading: (arg: boolean) => void;\r\n    setIsError: (arg: boolean) => void;\r\n    setErrorMsg: (arg: string) => void;\r\n    onConfirm: ()=>void;\r\n    confirmMessage: string;\r\n}\r\n\r\n\r\nconst ConfirmDialog: React.FC<DialogProps> = ({ setIsLoading, setIsError, setErrorMsg, onConfirm, confirmMessage }) => {\r\n    return (\r\n        <div className=\"flex flex-col relative px-12 h-full content-center\">\r\n            <p className=\"text-2xl self-center text-center\">\r\n                {confirmMessage}\r\n            </p>\r\n            <button onClick={onConfirm}\r\n                className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-full my-5 cursor-pointer\">\r\n                Confirm\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ConfirmDialog;\r\n","import React, { useEffect, useState } from 'react'\r\nimport AddCharacterDialog from 'components/Dialog/AddCharacterDialog';\r\nimport ConfirmDeleteDialog from 'components/Dialog/ConfirmDialog';\r\nimport { DialogType } from 'components/Dialog/types';\r\nimport { deleteCharacter } from 'redux/stateSlice';\r\nimport { useAppDispatch, useAppSelector } from 'redux/hooks';\r\n\r\ninterface DialogProps {\r\n    setDialogOpen: (arg: boolean) => void;\r\n    type: DialogType;\r\n}\r\n\r\n\r\nconst BaseDialog: React.FC<DialogProps> = ({ setDialogOpen, type }) => {\r\n    const [header, setHeader] = useState(\"Dialog\");\r\n    const [isError, setIsError] = useState(false);\r\n    const [errorMsg, setErrorMsg] = useState(\"\");\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const charIndex = useAppSelector(state => state.characterIndex);\r\n    const dispatch = useAppDispatch();\r\n\r\n    useEffect(() => {\r\n        switch (type) {\r\n            case DialogType.addCharacter:\r\n                setHeader(\"Add Character\");\r\n                break;\r\n            case DialogType.deleteCharacter | DialogType.deleteStorage:\r\n                setHeader(\"Confirm Action\");\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }, [type])\r\n\r\n    const renderContent = () => {\r\n        switch (type) {\r\n            case DialogType.addCharacter:\r\n                return <AddCharacterDialog setDialogOpen={setDialogOpen} setIsError={setIsError} setErrorMsg={setErrorMsg} setIsLoading={setIsLoading} />\r\n            case DialogType.deleteCharacter:\r\n                return <ConfirmDeleteDialog {...{\r\n                    setIsError, setErrorMsg, setIsLoading,\r\n                    confirmMessage: \"Are you sure you want to delete this character?\",\r\n                    onConfirm: () => {\r\n                        dispatch(deleteCharacter(charIndex));\r\n                        setDialogOpen(false);\r\n                    }\r\n                }} ></ConfirmDeleteDialog>\r\n            case DialogType.deleteStorage:\r\n                return <ConfirmDeleteDialog {...{\r\n                    setIsError, setErrorMsg, setIsLoading,\r\n                    confirmMessage: \"Are you sure you want to wipe your character data?\",\r\n                    onConfirm: () => {\r\n                        localStorage.clear();\r\n                        setDialogOpen(false);\r\n                        window.location.reload();\r\n                    }\r\n                }} ></ConfirmDeleteDialog>\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"fixed h-full w-screen z-50 inset-0 bg-gray-300 bg-opacity-75 flex justify-center items-center\" >\r\n            <span className=\"relative inset-0 flex flex-col bg-white max-w-1/2 min-w-1/4 max-h-full rounded-lg text-black\">\r\n                <p className=\"underline text-center h-18 text-2xl font-bold p-5\">{header}</p>\r\n                <img onClick={() => setDialogOpen(false)} src={`${process.env.PUBLIC_URL}/exit.svg`} className=\"absolute top-0 right-0 h-4 w-4 m-3 hover:bg-blue-200\" alt=\"exit\" />\r\n                {renderContent()}\r\n            </span>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default BaseDialog\r\n","import React, { useState } from 'react';\r\nimport BaseDialog from 'components/Dialog/BaseDialog';\r\nimport { DialogType } from './types';\r\n\r\n\r\nconst useDialog = () => {\r\n    const [dialogOpen, setDialogOpen] = useState(false);\r\n    const [dialogType, setDialogType] = useState<DialogType>(DialogType.deleteCharacter)\r\n    const renderDialog = () => {\r\n        return dialogOpen && <BaseDialog setDialogOpen={setDialogOpen} type={dialogType}></BaseDialog>\r\n    }\r\n    const toggleDialog = (type: DialogType)=>{\r\n        setDialogOpen(!dialogOpen);\r\n        setDialogType(type)\r\n    }\r\n    return (\r\n        {\r\n            toggleDialog, renderDialog\r\n        }\r\n    )\r\n}\r\n\r\nexport default useDialog\r\n","import React from 'react'\r\nimport { useAppDispatch } from 'redux/hooks';\r\nimport { setChecklistType } from 'redux/stateSlice';\r\nimport { ChecklistType } from 'types';\r\nimport useDialog from 'components/Dialog/useDialog';\r\nimport { DialogType } from './Dialog/types';\r\nconst Header = () => {\r\n    const dispatch = useAppDispatch();\r\n    const {renderDialog,toggleDialog} = useDialog();\r\n    return (\r\n        <div className=\"sticky top-0 z-30 h-14 px-36 flex-1 min-w-full flex items-center container bg-purple-500 text-white\">\r\n            {renderDialog()}\r\n            <img src={`${process.env.PUBLIC_URL}/maplestory-icon.png`} alt=\"Icon\" width={32}/>\r\n            <p className=\"text-xl\">\r\n                Maplelist\r\n            </p>\r\n            <div onClick={() => { dispatch(setChecklistType(ChecklistType.dailyChecklist)) }} className=\"bg-purple-500 hover:bg-purple-700 text-white px-3 py-2 rounded-md text-lg ml-20 cursor-pointer\">\r\n                Dailies\r\n            </div>\r\n            <div onClick={() => { dispatch(setChecklistType(ChecklistType.weeklyBosses)) }} className=\"bg-purple-500 hover:bg-purple-700 text-white px-3 py-2 rounded-md text-lg ml-5 cursor-pointer\">\r\n                Weeklies\r\n            </div>\r\n            <div onClick={() => { dispatch(setChecklistType(ChecklistType.shiftChecklist)) }} className=\"bg-purple-500 hover:bg-purple-700 text-white px-3 py-2 rounded-md text-lg ml-5 cursor-pointer\">\r\n                Shift\r\n            </div>\r\n            <div onClick={()=>{\r\n                toggleDialog(DialogType.deleteStorage);\r\n            }} className=\"bg-purple-500 hover:bg-purple-700 text-white px-3 py-2 rounded-md text-lg ml-5 cursor-pointer\">\r\n                Clear Character Data\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","import React from 'react'\r\nimport { useAppDispatch } from 'redux/hooks';\r\nimport { setCharIndex } from 'redux/stateSlice';\r\nimport { Class } from 'types'\r\nimport { DialogType } from './Dialog/types';\r\ninterface CharacterProps {\r\n    name: string;\r\n    className: Class;\r\n    level: number;\r\n    index: number;\r\n    selected?: boolean;\r\n    toggleDialog: (type: DialogType)=>void;\r\n}\r\n\r\n\r\nconst CharacterCard: React.FC<CharacterProps> = ({ className, level, name, index, selected, toggleDialog }) => {\r\n    const dispatch = useAppDispatch();\r\n\r\n    return (\r\n        <div className={`relative cursor-pointer border-blue-400 border rounded-lg flex items-center ${selected ? \"text-white bg-blue-400\" : \"\"}`} onClick={() => dispatch(setCharIndex(index))}>\r\n            <img className=\" w-12 h-12 m-2 rounded-full ring-1 blue-500\" src={`${process.env.PUBLIC_URL}/${Class[className]}.svg`} alt={`${Class[className]}`} />\r\n            <div className=\"pr-2\">\r\n                <p>{name}</p>\r\n                <p>{level}</p>\r\n            </div>\r\n            <img onClick={() => {toggleDialog(DialogType.deleteCharacter)}} src={`${process.env.PUBLIC_URL}/exit.svg`} className={`absolute top-0 right-0 h-2 w-2 m-1 hover:bg-blue-200 ${selected ? \"\":\"\"}`} alt=\"exit\"/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CharacterCard\r\n","import React, { useEffect } from 'react';\r\nimport { updateCharList, resetDailyChecklists, resetWeeklyChecklists } from 'redux/stateSlice';\r\nimport { useAppSelector, useAppDispatch } from 'redux/hooks';\r\nimport { isEmpty } from 'lodash';\r\nimport useDialog from 'components/Dialog/useDialog';\r\nimport CharacterCard from './CharacterCard';\r\nimport { DialogType } from './Dialog/types';\r\n\r\nconst CharacterList: React.FC = () => {\r\n    const charList = useAppSelector(state => state.characters);\r\n    const charIndex = useAppSelector(state => state.characterIndex);\r\n    const dispatch = useAppDispatch();\r\n    const { renderDialog, toggleDialog } = useDialog();\r\n\r\n    const checkIfLastVisitedExpired = () => {\r\n        const loginDate = new Date();\r\n        const lastCheckedDate = localStorage.getItem(\"lastVisited\");\r\n        console.log(loginDate.getHours());\r\n        //if its daily expiry\r\n        if (lastCheckedDate && loginDate.getHours() > 19 && new Date(lastCheckedDate) < loginDate && new Date(lastCheckedDate).getHours() < 19) {\r\n            console.log(\"Daily check passed\");\r\n            //check if its weekly expired\r\n            if (loginDate.getDay() === 0) {\r\n                console.log(\"week check passed\");\r\n                dispatch(resetWeeklyChecklists());\r\n            } else {\r\n                console.log(\"weeklycheck failed\")\r\n                dispatch(resetDailyChecklists());\r\n            }\r\n        } else {\r\n            dispatch(resetDailyChecklists());\r\n        }\r\n        localStorage.setItem(\"lastVisited\", loginDate.toISOString());\r\n    }\r\n\r\n    useEffect(() => {\r\n        checkIfLastVisitedExpired();\r\n        const list = localStorage.getItem(\"characters\");\r\n        if (!isEmpty(list)) {\r\n            dispatch(updateCharList(JSON.parse(list!.toString())))\r\n        }\r\n    }, [])\r\n\r\n    return (\r\n        <div className=\"grid grid-rows-1 grid-cols-2\">\r\n            {renderDialog()}\r\n            <div className=\"flex items-center py-5 gap-x-4\">\r\n                {charList && charList.map((char, index) => (\r\n                    <CharacterCard {...{ index, name: char.name, className: char.class, level: char.level, selected: index === charIndex, toggleDialog }} key={char.name} />\r\n                ))}\r\n            </div>\r\n            <button onClick={() => { toggleDialog(DialogType.addCharacter) }} className=\"col-start-2 bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-full my-5 w-40 place-self-end self-start\">\r\n                Add Character\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CharacterList\r\n","import ChecklistRenderer from 'components/Checklist/ChecklistRenderer';\r\nimport React from 'react'\r\nimport { useAppSelector } from 'redux/hooks';\r\n\r\nconst ShiftPage = () => {\r\n    const { shiftChecklist } = useAppSelector(state=>state.checklist);\r\n    return (\r\n        <div>\r\n            <ChecklistRenderer checklist={shiftChecklist}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ShiftPage\r\n","import LandingPage from 'pages/LandingPage';\r\nimport React from 'react'\r\nimport DailiesPage from 'pages/DailiesPage';\r\nimport WeekliesPage from 'pages/WeekliesPage';\r\nimport Header from 'components/Header';\r\nimport CharacterList from 'components/CharacterList';\r\nimport ShiftPage from 'pages/ShiftPage';\r\nimport { useAppSelector } from 'redux/hooks';\r\nimport { ChecklistType } from 'types';\r\n\r\nconst AppRouter = () => {\r\n    const checklistType = useAppSelector(state => state.checklistType);\r\n    const renderPage = () => {\r\n        switch (checklistType) {\r\n            case ChecklistType.dailyChecklist:\r\n                return <DailiesPage/>;\r\n            case ChecklistType.weeklyBosses:\r\n                return <WeekliesPage/>;\r\n            case ChecklistType.shiftChecklist:\r\n                return <ShiftPage/>;\r\n            default:\r\n                return <LandingPage/>;\r\n        }\r\n    }\r\n    return (\r\n        <div>\r\n                <Header />\r\n                <div className=\"lg:z-50 max-w-8xl px-36 container min-w-full h-screen\">\r\n                    <CharacterList />\r\n                    {renderPage()}\r\n                </div>\r\n        </div>\r\n    )\r\n}\r\nexport default AppRouter;\r\n","import { configureStore } from '@reduxjs/toolkit'\r\nimport stateSlice from 'redux/stateSlice'\r\n\r\n\r\nconst store = configureStore({\r\n  reducer: stateSlice\r\n})\r\n\r\n// Infer the `RootState` and `AppDispatch` types from the store itself\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppDispatch = typeof store.dispatch;\r\nexport default store;\r\n","import AppRouter from \"components/AppRouter\";\r\nimport { Provider } from 'react-redux';\r\nimport store from 'redux/store';\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <Provider store={store}>\r\n        <AppRouter />\r\n      </Provider>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom'\r\nimport App from 'App';\r\nimport 'styles/base.css';\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}