{"version":3,"sources":["types.ts","redux/hooks.ts","config/checklists.ts","components/Dialog/types.ts","redux/helpers.ts","redux/stateSlice.ts","components/Dialog/AddCharacterDialog.tsx","components/Dialog/ConfirmDialog.tsx","components/Dialog/BaseDialog.tsx","components/Dialog/useDialog.tsx","components/Header.tsx","components/Character/CharacterCard.tsx","components/Character/CharacterList.tsx","components/Sidebar.tsx","components/Checklist/ChecklistItem.tsx","components/Checklist/SubChecklistItem.tsx","components/Checklist/SubChecklist.tsx","components/Checklist/ChecklistRenderer.tsx","helpers/timeFunctions.ts","components/Timer.tsx","components/ButtonBar.tsx","components/ContentContainer.tsx","pages/AppRouter.tsx","redux/store.ts","App.tsx","index.tsx"],"names":["ChecklistType","Class","useAppDispatch","useDispatch","useAppSelector","useSelector","checklist","dailyChecklist","Ursus","Gollux","Bosses","Zakum","Horntail","Hila","Arkarium","Magnus","Ranmaru","Commerci","shiftChecklist","Legion","Familiars","Pets","weeklyBosses","Cygnus","Akechi","Lotus","Damien","Lucid","DialogType","clearChecklist","obj","returnObject","Object","entries","forEach","field","value","initialState","characters","characterIndex","checklistType","stateSlice","createSlice","name","reducers","updateChecklist","state","action","payload","updateCharList","setChecklistType","updateCharacter","localStorage","setItem","JSON","stringify","current","addChar","push","updateChecklistItem","setCharIndex","charName","storage","parse","getItem","isEmpty","getChecklistByCharacterName","dailyResetChecklists","character","currentChecklist","toString","clearedChecklist","checklistBase","weeklyResetChecklists","resetChecklists","deleteCharacter","removeItem","splice","updateSubChecklist","data","addChecklistItem","deleteChecklistItem","heading","deepFreeze","omit","addSubChecklist","addSubChecklistItem","clearExistingChecklist","clearCharacterChecklist","actions","selectChecklist","selectChecklistType","selectCharacters","selectCharacterIndex","StyledBackground","styled","div","StyledButton","button","StyledInput","input","InputClass","AddPictureDialog","setDialogOpen","useState","setName","magician","job","setJob","level","setLevel","dispatch","className","type","maxLength","onChange","e","target","keys","map","max","min","parseInt","onClick","src","process","alt","class","ConfirmDialog","confirmMessage","onConfirm","StyledDiv","BaseDialog","setHeader","charIndex","useEffect","addCharacter","deleteStorage","resetAllChecklists","AddCharacterDialog","clear","window","location","reload","informReset","renderContent","useDialog","dialogOpen","dialogType","setDialogType","toggleDialog","renderDialog","NavItemClass","Header","TooltipProps","arrowColor","StyledContainer","CharacterCard","index","selected","readOnlyMode","setReadOnlyMode","newName","setNewName","newLevel","setNewLevel","readOnly","currentTarget","placeholder","Number","data-tip","data-for","id","CharacterList","charList","list","currentDate","utcToZonedTime","Date","lastCheckedDate","resetDate","set","hours","minutes","seconds","milliseconds","lastLogin","getHours","isBefore","isWednesday","console","log","toISOString","checkIfLastVisitedExpired","char","key","SidebarContainer","Sidebar","StyledLabel","label","ChecklistItem","checked","setChecked","SubChecklistItem","globalChecked","onChangeHandler","SubChecklist","allChecked","setAllChecked","isAdding","setIsAdding","mapValues","onKeyDown","ChecklistRenderer","setList","categoryList","setCategoryList","tempList","tempCategoryList","renderHeader","calculateTimeLeft","difference","differenceInMilliseconds","days","Math","floor","formatToDate","timeLeft","Timer","endOfToday","timeUntilDailyReset","setTimeUntilDailyReset","timer","setTimeout","clearTimeout","ButtonBar","StyledCard","ContentContainer","Container","MainPage","store","configureStore","reducer","App","AppRouter","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bac0e93d.chunk.js","sourcesContent":["interface Checklist {\r\n  [key: string]: boolean | Checklist;\r\n}\r\n\r\ninterface Character {\r\n  name: string;\r\n  class: Class;\r\n  level: number;\r\n}\r\n\r\nenum ChecklistType {\r\n  dailyChecklist = \"dailyChecklist\",\r\n  weeklyBosses = \"weeklyBosses\",\r\n  shiftChecklist = \"shiftChecklist\",\r\n}\r\n\r\ninterface FullChecklist {\r\n  dailyChecklist: Checklist;\r\n  weeklyBosses: Checklist;\r\n  shiftChecklist: Checklist;\r\n}\r\n\r\nenum Class {\r\n  magician = \"magician\",\r\n  thief = \"thief\",\r\n  warrior = \"warrior\",\r\n  bowman = \"bowman\",\r\n  pirate = \"pirate\",\r\n}\r\n\r\nexport type { Checklist, Character, FullChecklist };\r\nexport { Class, ChecklistType };\r\n","import { TypedUseSelectorHook, useDispatch, useSelector } from \"react-redux\";\r\nimport { RootState, AppDispatch } from \"./store\";\r\n\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\r\n","import { FullChecklist } from \"types\";\r\n\r\nconst checklist: FullChecklist = {\r\n  dailyChecklist: {\r\n    \"Arcane Dailies\": false,\r\n    Ursus: false,\r\n    \"Maple Tour\": false,\r\n    \"Monster Park\": false,\r\n    \"Yu Garden\": false,\r\n    Gollux: false,\r\n    \"Legion Quest\": false,\r\n    Bosses: {\r\n      Zakum: false,\r\n      Horntail: false,\r\n      Hila: false,\r\n      \"Root Abyss\": false,\r\n      \"Von Leon\": false,\r\n      Arkarium: false,\r\n      Magnus: false,\r\n      \"Pink Bean\": false,\r\n      Ranmaru: false,\r\n    },\r\n    Commerci: {\r\n      \"Commerci PQ\": false,\r\n      \"Commerci Solo\": false,\r\n    },\r\n  },\r\n  shiftChecklist: {\r\n    \"Wealth Acquisition Potion\": false,\r\n    \"2x EXP\": false,\r\n    Legion: false,\r\n    Familiars: false,\r\n    \"Drop/Meso Gear\": false,\r\n    \"Wild Totem\": false,\r\n    \"Additional EXP Shit\": false,\r\n    \"Link Skill Review\": false,\r\n    \"Legion Board Review\": false,\r\n    Pets: false,\r\n  },\r\n  weeklyBosses: {\r\n    \"Hard Magnus\": false,\r\n    \"Chaos Zakum\": false,\r\n    \"Hard Hila\": false,\r\n    \"Chao Pink Bean\": false,\r\n    Cygnus: false,\r\n    \"Chaos Root Abyss\": {\r\n      \"Chaos Queen\": false,\r\n      \"Chaos Von Bon\": false,\r\n      \"Chaos Pierre\": false,\r\n      \"Chaos Vellum\": false,\r\n    },\r\n    \"Chaos Papulatus\": false,\r\n    \"Princess No\": false,\r\n    Akechi: false,\r\n    Lotus: false,\r\n    Damien: false,\r\n    Lucid: false,\r\n    \"Verus Hila\": false,\r\n  },\r\n};\r\n\r\nexport default checklist;\r\n","export enum DialogType {\r\n  deleteCharacter,\r\n  addCharacter,\r\n  deleteStorage,\r\n  informReset,\r\n  resetAllChecklists,\r\n}\r\n","import checklist from \"config/checklists\";\r\nimport { isEmpty } from \"lodash\";\r\nimport { Checklist } from \"types\";\r\n\r\nconst getChecklistByCharacterName = (charName: string) => {\r\n  const storage = JSON.parse(\r\n    //@ts-ignore\r\n    localStorage.getItem(charName)\r\n  );\r\n  if (!isEmpty(storage)) {\r\n    return storage;\r\n  } else {\r\n    localStorage.setItem(charName, JSON.stringify(checklist));\r\n    return checklist;\r\n  }\r\n};\r\n\r\n//recursive function that sets everything to false in the checklist.\r\nconst clearChecklist = (obj: Checklist) => {\r\n  const returnObject: Checklist = {};\r\n  Object.entries(obj).forEach(([field, value]) => {\r\n    if (typeof value !== \"boolean\") {\r\n      returnObject[field] = clearChecklist(value);\r\n    } else {\r\n      returnObject[field] = false;\r\n    }\r\n  });\r\n  return returnObject;\r\n};\r\n\r\nexport { getChecklistByCharacterName, clearChecklist };\r\n","import { createSlice, current, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport checklistBase from \"config/checklists\";\r\nimport { Character, Checklist, ChecklistType, FullChecklist } from \"types\";\r\nimport { getChecklistByCharacterName, clearChecklist } from \"redux/helpers\";\r\nimport { RootState } from \"./store\";\r\nimport {\r\n  AddChecklistData,\r\n  ChecklistUpdateData,\r\n  State,\r\n  SubChecklistData,\r\n} from \"./types\";\r\nimport deepFreeze from \"deep-freeze\";\r\nimport { isEmpty, omit } from \"lodash\";\r\nconst initialState: State = {\r\n  checklist: {\r\n    dailyChecklist: {},\r\n    shiftChecklist: {},\r\n    weeklyBosses: {},\r\n  },\r\n  characters: [],\r\n  characterIndex: 0,\r\n  checklistType: ChecklistType.dailyChecklist,\r\n};\r\n\r\nexport const stateSlice = createSlice({\r\n  name: \"state\",\r\n  initialState: initialState,\r\n  reducers: {\r\n    updateChecklist: (state, action: PayloadAction<FullChecklist>) => {\r\n      state.checklist = action.payload;\r\n    },\r\n    updateCharList: (state, action: PayloadAction<Array<Character>>) => {\r\n      state.characters = action.payload;\r\n    },\r\n    setChecklistType: (state, action: PayloadAction<ChecklistType>) => {\r\n      state.checklistType = action.payload;\r\n    },\r\n    updateCharacter: (state, action: PayloadAction<Character>) => {\r\n      state.characters[state.characterIndex] = action.payload;\r\n      localStorage.setItem(\r\n        \"characters\",\r\n        JSON.stringify(current(state).characters)\r\n      );\r\n    },\r\n    addChar: (state, action: PayloadAction<Character>) => {\r\n      state.characters.push(action.payload);\r\n      localStorage.setItem(\r\n        \"characters\",\r\n        JSON.stringify(current(state).characters)\r\n      );\r\n    },\r\n    updateChecklistItem: (\r\n      state,\r\n      action: PayloadAction<ChecklistUpdateData>\r\n    ) => {\r\n      const { field } = action.payload;\r\n      const { checklistType, characters, checklist, characterIndex } = state;\r\n      state.checklist[checklistType][field] = !checklist[checklistType][field];\r\n      localStorage.setItem(\r\n        characters[characterIndex].name,\r\n        JSON.stringify(current(state).checklist)\r\n      );\r\n    },\r\n    setCharIndex: (state, action: PayloadAction<number>) => {\r\n      const { name } = state.characters[action.payload];\r\n      state.checklist = getChecklistByCharacterName(name);\r\n      state.characterIndex = action.payload;\r\n    },\r\n    dailyResetChecklists: (state) => {\r\n      current(state).characters.forEach((character) => {\r\n        const currentChecklist = localStorage.getItem(character.name);\r\n        if (currentChecklist) {\r\n          const checklist = JSON.parse(currentChecklist.toString());\r\n          const { weeklyBosses } = checklist;\r\n          const clearedChecklist = clearChecklist(checklist);\r\n          localStorage.setItem(\r\n            character.name,\r\n            JSON.stringify({ ...clearedChecklist, weeklyBosses })\r\n          );\r\n        } else {\r\n          localStorage.setItem(\r\n            character.name,\r\n            JSON.stringify({ ...checklistBase })\r\n          );\r\n        }\r\n      });\r\n    },\r\n    weeklyResetChecklists: (state) => {\r\n      current(state).characters.forEach((character) => {\r\n        const currentChecklist = localStorage.getItem(character.name);\r\n        if (currentChecklist) {\r\n          const checklist = JSON.parse(currentChecklist.toString());\r\n          const clearedChecklist = clearChecklist(checklist);\r\n          localStorage.setItem(\r\n            character.name,\r\n            JSON.stringify({ ...clearedChecklist })\r\n          );\r\n        } else {\r\n          localStorage.setItem(\r\n            character.name,\r\n            JSON.stringify({ ...checklistBase })\r\n          );\r\n        }\r\n      });\r\n    },\r\n    resetChecklists: (state) => {\r\n      const { characters } = current(state);\r\n      characters.forEach((character) => {\r\n        localStorage.setItem(\r\n          character.name,\r\n          JSON.stringify({ ...checklistBase })\r\n        );\r\n      });\r\n    },\r\n    deleteCharacter: (state, action: PayloadAction<number>) => {\r\n      const { name } = state.characters[action.payload];\r\n      localStorage.removeItem(name);\r\n      state.characters.splice(action.payload, 1);\r\n      localStorage.setItem(\r\n        \"characters\",\r\n        JSON.stringify(current(state).characters)\r\n      );\r\n    },\r\n    updateSubChecklist: (state, action: PayloadAction<SubChecklistData>) => {\r\n      state.checklist[state.checklistType][action.payload.field] =\r\n        action.payload.data;\r\n      localStorage.setItem(\r\n        state.characters[state.characterIndex].name,\r\n        JSON.stringify(current(state).checklist)\r\n      );\r\n    },\r\n    addChecklistItem: (state, action: PayloadAction<string>) => {\r\n      const { checklistType, checklist } = current(state);\r\n      if (!(action.payload in checklist[checklistType])) {\r\n        state.checklist[checklistType][action.payload] = false;\r\n        localStorage.setItem(\r\n          state.characters[state.characterIndex].name,\r\n          JSON.stringify(current(state).checklist)\r\n        );\r\n      }\r\n    },\r\n    deleteChecklistItem: (state, action: PayloadAction<AddChecklistData>) => {\r\n      const { checklistType, checklist } = current(state);\r\n      if (action.payload.heading) {\r\n        deepFreeze(checklist[checklistType][action.payload.heading]);\r\n        // @ts-ignore\r\n        state.checklist[checklistType][action.payload.heading] = omit(\r\n          // @ts-ignore\r\n          checklist[checklistType][action.payload.heading],\r\n          [action.payload.field]\r\n        );\r\n      } else {\r\n        deepFreeze(checklist[checklistType]);\r\n        state.checklist[checklistType] = omit(checklist[checklistType], [\r\n          action.payload.field,\r\n        ]);\r\n      }\r\n      localStorage.setItem(\r\n        state.characters[state.characterIndex].name,\r\n        JSON.stringify(current(state).checklist)\r\n      );\r\n    },\r\n    addSubChecklist: (state, action: PayloadAction<string>) => {\r\n      const { checklistType, checklist } = current(state);\r\n      // @ts-ignore\r\n      if (!(action.payload in checklist[checklistType])) {\r\n        // @ts-ignore\r\n        state.checklist[checklistType][action.payload] = {};\r\n        localStorage.setItem(\r\n          state.characters[state.characterIndex].name,\r\n          JSON.stringify(current(state).checklist)\r\n        );\r\n      }\r\n    },\r\n    addSubChecklistItem: (\r\n      state,\r\n      action: PayloadAction<{ field: string; heading: string }>\r\n    ) => {\r\n      const { checklistType, checklist } = current(state);\r\n      if (\r\n        typeof checklist[checklistType][action.payload.heading] !== \"boolean\"\r\n      ) {\r\n        if (\r\n          !(\r\n            action.payload.field in\r\n            // @ts-ignore\r\n            checklist[checklistType][action.payload.heading]\r\n          )\r\n        ) {\r\n          // @ts-ignore\r\n          state.checklist[checklistType][action.payload.heading][\r\n            action.payload.field\r\n          ] = false;\r\n          localStorage.setItem(\r\n            state.characters[state.characterIndex].name,\r\n            JSON.stringify(current(state).checklist)\r\n          );\r\n        }\r\n      }\r\n    },\r\n    clearExistingChecklist: (state) => {\r\n      const { checklistType, checklist } = current(state);\r\n      state.checklist[checklistType] = clearChecklist(checklist[checklistType]);\r\n      localStorage.setItem(\r\n        state.characters[state.characterIndex].name,\r\n        JSON.stringify(current(state).checklist)\r\n      );\r\n    },\r\n    clearCharacterChecklist: (state) => {\r\n      const { checklist } = current(state);\r\n      const clearedChecklist = clearChecklist(checklist);\r\n      //@ts-ignore\r\n      state.checklist = { ...clearedChecklist };\r\n      localStorage.setItem(\r\n        state.characters[state.characterIndex].name,\r\n        JSON.stringify(current(state).checklist)\r\n      );\r\n    },\r\n  },\r\n});\r\n\r\nexport const {\r\n  updateChecklist,\r\n  setCharIndex,\r\n  updateCharList,\r\n  addChar,\r\n  updateCharacter,\r\n  updateChecklistItem,\r\n  dailyResetChecklists,\r\n  weeklyResetChecklists,\r\n  resetChecklists,\r\n  clearExistingChecklist,\r\n  clearCharacterChecklist,\r\n  setChecklistType,\r\n  deleteCharacter,\r\n  updateSubChecklist,\r\n  addChecklistItem,\r\n  addSubChecklistItem,\r\n  addSubChecklist,\r\n  deleteChecklistItem,\r\n} = stateSlice.actions;\r\n\r\nexport const selectChecklist = (state: RootState) => state.checklist;\r\nexport const selectChecklistType = (state: RootState) => state.checklistType;\r\nexport const selectCharacters = (state: RootState) => state.characters;\r\nexport const selectCharacterIndex = (state: RootState) => state.characterIndex;\r\n\r\nexport default stateSlice.reducer;\r\n","import React, { useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { Class } from \"types\";\r\nimport { addChar } from \"redux/stateSlice\";\r\nimport { useAppDispatch } from \"redux/hooks\";\r\n\r\ninterface DialogProps {\r\n  setDialogOpen: (arg: boolean) => void;\r\n}\r\n\r\nconst StyledBackground = styled.div`\r\n  background-color: #eeeeee;\r\n  border: 1px solid #8d8d8d;\r\n  height: calc(100% - 3rem);\r\n`;\r\n\r\nconst StyledButton = styled.button`\r\n  background: linear-gradient(180deg, #ddff00 0%, #88cc00 100%);\r\n`;\r\n\r\nconst StyledInput = styled.input`\r\n  -moz-appearance: textfield;\r\n  input::-webkit-outer-spin-button,\r\n  input::-webkit-inner-spin-button {\r\n    -webkit-appearance: none;\r\n  }\r\n`;\r\n\r\nconst InputClass =\r\n  \"mb-1 w-full block border-0 border-gray-300 border-b-2 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50\";\r\n\r\nconst AddPictureDialog: React.FC<DialogProps> = ({ setDialogOpen }) => {\r\n  const [name, setName] = useState(\"\");\r\n  const [job, setJob] = useState<Class>(Class.magician);\r\n  const [level, setLevel] = useState(0);\r\n  const dispatch = useAppDispatch();\r\n\r\n  return (\r\n    <div className=\"flex flex-col h-full content-center\">\r\n      <StyledBackground className=\"rounded-xl m-3 mb-1 flex items-center px-1 py-4\">\r\n        <div className=\"relative flex bg-white mx-2 px-4 py-4 h-full w-full rounded-xl flex flex-col gap-2\">\r\n          <p className=\"text-2xl text-center mb-2 font-semibold underline\">\r\n            Add Character\r\n          </p>\r\n          <label className=\"block\">\r\n            <span>Name</span>\r\n            <input\r\n              type=\"text\"\r\n              maxLength={12}\r\n              onChange={(e) => {\r\n                setName(e.target!.value);\r\n              }}\r\n              className={InputClass}\r\n            ></input>\r\n          </label>\r\n          <label className=\"block\">\r\n            <span>Class</span>\r\n            <select\r\n              onChange={(e) => {\r\n                setJob(Class[e.target!.value! as keyof typeof Class]);\r\n              }}\r\n              className={InputClass}\r\n            >\r\n              {Object.keys(Class).map((value) => {\r\n                return <option>{value}</option>;\r\n              })}\r\n            </select>\r\n          </label>\r\n          <label className=\"block\">\r\n            <span>Level</span>\r\n            <StyledInput\r\n              type=\"number\"\r\n              max={300}\r\n              min={0}\r\n              onChange={(e) => {\r\n                const value = parseInt(e.target.value);\r\n                if (value > 300 || value < 0) {\r\n                  setLevel(0);\r\n                } else {\r\n                  setLevel(value);\r\n                }\r\n              }}\r\n              value={level}\r\n              className={InputClass}\r\n            />\r\n          </label>\r\n        </div>\r\n        <img\r\n          onClick={() => setDialogOpen(false)}\r\n          src={`${process.env.PUBLIC_URL}/exit.svg`}\r\n          className=\"absolute top-0 right-0 h-4 w-4 m-4 cursor-pointer\"\r\n          alt=\"exit\"\r\n        />\r\n      </StyledBackground>\r\n      <StyledButton\r\n        onClick={() => {\r\n          dispatch(addChar({ name, level, class: job }));\r\n          setDialogOpen(false);\r\n        }}\r\n        className=\"self-end mr-4 h-6 mb-2 w-16 text-sm rounded-md text-white\"\r\n      >\r\n        Add\r\n      </StyledButton>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AddPictureDialog;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\ninterface DialogProps {\r\n  setDialogOpen: (arg: boolean) => void;\r\n  onConfirm: () => void;\r\n  confirmMessage: string;\r\n}\r\n\r\nconst StyledBackground = styled.div`\r\n  background-color: #eeeeee;\r\n  border: 1px solid #8d8d8d;\r\n  height: calc(100% - 3rem);\r\n`;\r\n\r\nconst StyledButton = styled.button`\r\n  background: linear-gradient(180deg, #ddff00 0%, #88cc00 100%);\r\n`;\r\n\r\nconst ConfirmDialog: React.FC<DialogProps> = ({\r\n  setDialogOpen,\r\n  confirmMessage,\r\n  onConfirm,\r\n}) => {\r\n  return (\r\n    <div className=\"relative flex flex-col h-full content-center \">\r\n      <StyledBackground className=\"rounded-xl m-3 mb-1 flex h-full items-center px-1 py-4\">\r\n        <div className=\"flex content-center justify-center w-1/3 h-full p-4 border-r-2 border-gray-200\">\r\n          <img\r\n            src={`${process.env.PUBLIC_URL}/admin.png`}\r\n            className=\"self-center\"\r\n            alt=\"\"\r\n          />\r\n        </div>\r\n        <div className=\"relative flex bg-white ml-4 mr-1 p-6 h-full w-full rounded-xl flex flex-col\">\r\n          <p className=\"text-base self-center text-center text-gray-500\">\r\n            {confirmMessage}\r\n          </p>\r\n        </div>\r\n        <img\r\n          onClick={() => setDialogOpen(false)}\r\n          src={`${process.env.PUBLIC_URL}/exit.svg`}\r\n          className=\"absolute top-0 right-0 h-4 w-4 m-4 cursor-pointer\"\r\n          alt=\"exit\"\r\n        />\r\n      </StyledBackground>\r\n      <StyledButton\r\n        className=\"self-end mr-4 h-6 mb-2 w-16 text-sm rounded-md text-white\"\r\n        onClick={onConfirm}\r\n      >\r\n        OK\r\n      </StyledButton>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ConfirmDialog;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport AddCharacterDialog from \"components/Dialog/AddCharacterDialog\";\r\nimport { DialogType } from \"components/Dialog/types\";\r\nimport { deleteCharacter, resetChecklists } from \"redux/stateSlice\";\r\nimport { useAppDispatch, useAppSelector } from \"redux/hooks\";\r\nimport ConfirmDialog from \"components/Dialog/ConfirmDialog\";\r\nimport styled from \"styled-components\";\r\n\r\ninterface DialogProps {\r\n  setDialogOpen: (arg: boolean) => void;\r\n  type: DialogType;\r\n}\r\n\r\nconst StyledDiv = styled.div`\r\n  background-color: #2e9cd7;\r\n`;\r\n\r\nconst BaseDialog: React.FC<DialogProps> = ({ setDialogOpen, type }) => {\r\n  const [header, setHeader] = useState(\"Dialog\");\r\n  const charIndex = useAppSelector((state) => state.characterIndex);\r\n  const dispatch = useAppDispatch();\r\n\r\n  useEffect(() => {\r\n    switch (type) {\r\n      case DialogType.addCharacter:\r\n        setHeader(\"Add Character\");\r\n        break;\r\n      case DialogType.deleteCharacter ||\r\n        DialogType.deleteStorage ||\r\n        DialogType.resetAllChecklists:\r\n        setHeader(\"Confirm Action\");\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  }, [type]);\r\n\r\n  const renderContent = () => {\r\n    switch (type) {\r\n      case DialogType.addCharacter:\r\n        return <AddCharacterDialog setDialogOpen={setDialogOpen} />;\r\n      case DialogType.deleteCharacter:\r\n        return (\r\n          <ConfirmDialog\r\n            {...{\r\n              confirmMessage: \"Are you sure you want to delete this character?\",\r\n              setDialogOpen,\r\n              onConfirm: () => {\r\n                dispatch(deleteCharacter(charIndex));\r\n                setDialogOpen(false);\r\n              },\r\n            }}\r\n          ></ConfirmDialog>\r\n        );\r\n      case DialogType.deleteStorage:\r\n        return (\r\n          <ConfirmDialog\r\n            {...{\r\n              confirmMessage:\r\n                \"Are you sure you want to wipe your character data?\",\r\n              setDialogOpen,\r\n              onConfirm: () => {\r\n                localStorage.clear();\r\n                setDialogOpen(false);\r\n                window.location.reload();\r\n              },\r\n            }}\r\n          />\r\n        );\r\n      case DialogType.informReset:\r\n        return (\r\n          <ConfirmDialog\r\n            {...{\r\n              confirmMessage: \"Your checklists have been reset!\",\r\n              setDialogOpen,\r\n              onConfirm: () => {\r\n                setDialogOpen(false);\r\n              },\r\n            }}\r\n          />\r\n        );\r\n      case DialogType.resetAllChecklists:\r\n        return (\r\n          <ConfirmDialog\r\n            {...{\r\n              confirmMessage:\r\n                \"Are you sure you want to reset all your checklists to the original list? This cannot be undone.\",\r\n              setDialogOpen,\r\n              onConfirm: () => {\r\n                dispatch(resetChecklists());\r\n                setDialogOpen(false);\r\n                window.location.reload();\r\n              },\r\n            }}\r\n          />\r\n        );\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"fixed h-full w-screen z-50 inset-0 bg-gray-300 bg-opacity-75 flex justify-center items-center\">\r\n      <StyledDiv className=\"relative max-w-1/3 rounded-xl text-black\">\r\n        {renderContent()}\r\n      </StyledDiv>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BaseDialog;\r\n","import React, { useState } from \"react\";\r\nimport BaseDialog from \"components/Dialog/BaseDialog\";\r\nimport { DialogType } from \"./types\";\r\n\r\nconst useDialog = () => {\r\n  const [dialogOpen, setDialogOpen] = useState(false);\r\n  const [dialogType, setDialogType] = useState<DialogType>(\r\n    DialogType.deleteCharacter\r\n  );\r\n  const renderDialog = () => {\r\n    return (\r\n      dialogOpen && (\r\n        <BaseDialog\r\n          setDialogOpen={setDialogOpen}\r\n          type={dialogType}\r\n        ></BaseDialog>\r\n      )\r\n    );\r\n  };\r\n  const toggleDialog = (type: DialogType) => {\r\n    setDialogOpen(!dialogOpen);\r\n    setDialogType(type);\r\n  };\r\n  return {\r\n    toggleDialog,\r\n    renderDialog,\r\n  };\r\n};\r\n\r\nexport default useDialog;\r\n","import React from \"react\";\r\nimport { useAppDispatch } from \"redux/hooks\";\r\nimport { setChecklistType } from \"redux/stateSlice\";\r\nimport { ChecklistType } from \"types\";\r\nimport useDialog from \"components/Dialog/useDialog\";\r\nimport { DialogType } from \"./Dialog/types\";\r\n\r\nconst NavItemClass =\r\n  \"hover:bg-accent-grey h-full cursor-pointer px-3 flex items-center  text-right\";\r\n\r\nconst Header = () => {\r\n  const dispatch = useAppDispatch();\r\n  const { renderDialog, toggleDialog } = useDialog();\r\n  return (\r\n    <div className=\"fixed top-0 z-30 h-20 sm:px-10 lg:px-36 flex-1 min-w-full flex container bg-header-grey text-white justify-between\">\r\n      {renderDialog()}\r\n      <div className=\"flex items-center \">\r\n        <img\r\n          src={`${process.env.PUBLIC_URL}/maplestory-icon.png`}\r\n          alt=\"Icon\"\r\n          className=\"w-12 h-12\"\r\n        />\r\n        <p className=\"text-2xl\">Maplelist</p>\r\n      </div>\r\n      <div className=\"flex justify space-x-2 h-full text-xl text-white\">\r\n        <div\r\n          onClick={() => {\r\n            dispatch(setChecklistType(ChecklistType.dailyChecklist));\r\n          }}\r\n          className={NavItemClass}\r\n        >\r\n          <p>Dailies</p>\r\n        </div>\r\n        <div\r\n          onClick={() => {\r\n            dispatch(setChecklistType(ChecklistType.weeklyBosses));\r\n          }}\r\n          className={NavItemClass}\r\n        >\r\n          <p>Weeklies</p>\r\n        </div>\r\n        <div\r\n          onClick={() => {\r\n            dispatch(setChecklistType(ChecklistType.shiftChecklist));\r\n          }}\r\n          className={NavItemClass}\r\n        >\r\n          <p>Shift</p>\r\n        </div>\r\n        <div\r\n          onClick={() => {\r\n            toggleDialog(DialogType.deleteStorage);\r\n          }}\r\n          className=\"hover:bg-alert-red h-full cursor-pointer px-3 flex items-center text-right\"\r\n        >\r\n          <p>Clear Data</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React, { useState } from \"react\";\r\nimport { useAppDispatch } from \"redux/hooks\";\r\nimport { setCharIndex, updateCharacter } from \"redux/stateSlice\";\r\nimport { Class } from \"types\";\r\nimport { DialogType } from \"components/Dialog/types\";\r\nimport styled from \"styled-components\";\r\nimport ReactTooltip from \"react-tooltip\";\r\nimport \"styles/tooltip.css\";\r\n\r\ninterface CharacterProps {\r\n  name: string;\r\n  className: Class;\r\n  level: number;\r\n  index: number;\r\n  selected?: boolean;\r\n  toggleDialog: (type: DialogType) => void;\r\n}\r\n\r\nconst TooltipProps = {\r\n  type: \"info\",\r\n  className: \"tooltip\",\r\n  arrowColor: \"#0c0c0fdd\",\r\n};\r\n\r\nconst StyledInput = styled.input`\r\n  height: 30%;\r\n  width: 100%;\r\n`;\r\n\r\nconst StyledContainer = styled.div`\r\n  input:read-only {\r\n    border: 0px;\r\n  }\r\n  input[type=\"number\"]::-webkit-inner-spin-button,\r\n  input[type=\"number\"]::-webkit-outer-spin-button {\r\n    -webkit-appearance: none;\r\n    margin: 0;\r\n  }\r\n  input[type=\"number\"] {\r\n    -moz-appearance: textfield;\r\n  }\r\n`;\r\nconst CharacterCard: React.FC<CharacterProps> = ({\r\n  className,\r\n  level,\r\n  name,\r\n  index,\r\n  selected,\r\n  toggleDialog,\r\n}) => {\r\n  const dispatch = useAppDispatch();\r\n  const [readOnlyMode, setReadOnlyMode] = useState<boolean>(true);\r\n  const [newName, setNewName] = useState<string>(name);\r\n  const [newLevel, setNewLevel] = useState<number>(level);\r\n\r\n  return (\r\n    <StyledContainer\r\n      className={`w-4/5 relative cursor-pointer border-accent-grey border-2 shadow-lg flex items-center h-20 rounded-md hover:ring-2 focus:ring-gray-300 ${\r\n        selected ? \"ring ring-gray-300 ring-offset-1\" : \"\"\r\n      }`}\r\n      onClick={() => dispatch(setCharIndex(index))}\r\n    >\r\n      <img\r\n        className=\"hidden lg:block w-12 h-12 m-2 rounded-full ring-1\"\r\n        src={`${process.env.PUBLIC_URL}/${Class[className]}.svg`}\r\n        alt={`${Class[className]}`}\r\n      />\r\n      <div className=\"grid grid-cols-2 h-full\">\r\n        <div className=\"text-xs sm:text-sm lg:text-base flex flex-col justify-center\">\r\n          <StyledInput\r\n            type=\"text\"\r\n            readOnly={readOnlyMode}\r\n            className={`w-full p-0 border-0 ${\r\n              readOnlyMode ? \"\" : \"border-gray-300 border-b\"\r\n            }`}\r\n            onChange={(e) => {\r\n              setNewName(e.currentTarget.value);\r\n            }}\r\n            placeholder={name}\r\n          ></StyledInput>\r\n          <StyledInput\r\n            type=\"number\"\r\n            readOnly={readOnlyMode}\r\n            className={`w-full p-0 border-0 ${\r\n              readOnlyMode ? \"\" : \"border-gray-300 border-b\"\r\n            }`}\r\n            onChange={(e) => {\r\n              setNewLevel(Number(e.currentTarget.value));\r\n            }}\r\n            placeholder={level.toString()}\r\n          ></StyledInput>\r\n        </div>\r\n        <div className=\"flex flex-col justify-center pr-2 items-center\">\r\n          <img\r\n            src={`${process.env.PUBLIC_URL}/exit.svg`}\r\n            className=\"self-end\"\r\n            alt=\"exit\"\r\n            onClick={() => {\r\n              toggleDialog(DialogType.deleteCharacter);\r\n            }}\r\n          />\r\n          <img\r\n            onClick={() => {\r\n              if (readOnlyMode) {\r\n                setReadOnlyMode(!readOnlyMode);\r\n              } else {\r\n                dispatch(\r\n                  updateCharacter({\r\n                    name: newName,\r\n                    class: className,\r\n                    level: newLevel,\r\n                  })\r\n                );\r\n                setReadOnlyMode(!readOnlyMode);\r\n              }\r\n            }}\r\n            src={`${process.env.PUBLIC_URL}/${\r\n              readOnlyMode ? \"edit\" : \"checkmark\"\r\n            }.svg`}\r\n            className=\"self-end\"\r\n            alt=\"exit\"\r\n            data-tip\r\n            data-for=\"edit-tip\"\r\n          />\r\n        </div>\r\n      </div>\r\n      {readOnlyMode && (\r\n        <ReactTooltip id=\"edit-tip\" {...{ TooltipProps }}>\r\n          <span>Edit character information</span>\r\n        </ReactTooltip>\r\n      )}\r\n    </StyledContainer>\r\n  );\r\n};\r\n\r\nexport default CharacterCard;\r\n","import React, { useEffect } from \"react\";\r\nimport {\r\n  updateCharList,\r\n  dailyResetChecklists,\r\n  selectCharacters,\r\n  selectCharacterIndex,\r\n  weeklyResetChecklists,\r\n} from \"redux/stateSlice\";\r\nimport { useAppSelector, useAppDispatch } from \"redux/hooks\";\r\nimport { isEmpty } from \"lodash\";\r\nimport useDialog from \"components/Dialog/useDialog\";\r\nimport CharacterCard from \"components/Character/CharacterCard\";\r\nimport { DialogType } from \"components/Dialog/types\";\r\nimport { utcToZonedTime } from \"date-fns-tz\";\r\nimport { getHours, isWednesday, set, isBefore } from \"date-fns\";\r\n\r\nconst CharacterList: React.FC = () => {\r\n  const charList = useAppSelector(selectCharacters);\r\n  const charIndex = useAppSelector(selectCharacterIndex);\r\n  const dispatch = useAppDispatch();\r\n  const { renderDialog, toggleDialog } = useDialog();\r\n\r\n  const checkIfLastVisitedExpired = () => {\r\n    const currentDate = utcToZonedTime(new Date(), \"America/New_York\");\r\n    const lastCheckedDate = localStorage.getItem(\"lastVisited\");\r\n    const resetHour = 19; //19 reg\r\n    if (lastCheckedDate) {\r\n      const resetDate = set(currentDate, {\r\n        hours: resetHour,\r\n        minutes: 0,\r\n        seconds: 0,\r\n        milliseconds: 0,\r\n      }); //19 0 0 0\r\n      const lastLogin = utcToZonedTime(\r\n        lastCheckedDate!.toString(),\r\n        \"America/New_York\"\r\n      );\r\n      if (\r\n        getHours(currentDate) >= resetHour &&\r\n        isBefore(lastLogin, resetDate)\r\n      ) {\r\n        if (isWednesday(currentDate)) {\r\n          dispatch(weeklyResetChecklists());\r\n          console.log(\"Weekly Reset Triggered\");\r\n        } else {\r\n          dispatch(dailyResetChecklists());\r\n          console.log(\"Daily Reset Triggered\");\r\n        }\r\n        toggleDialog(DialogType.informReset);\r\n      }\r\n    }\r\n    localStorage.setItem(\"lastVisited\", currentDate.toISOString());\r\n  };\r\n\r\n  useEffect(() => {\r\n    const list = localStorage.getItem(\"characters\");\r\n    if (!isEmpty(list)) {\r\n      dispatch(updateCharList(JSON.parse(list!.toString())));\r\n    }\r\n    checkIfLastVisitedExpired(); //ADD DIALOG POPUP IF RESET\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"\">\r\n      {renderDialog()}\r\n      <div className=\"flex flex-col items-center py-5 gap-y-6\">\r\n        {charList &&\r\n          charList.map((char, index) => (\r\n            <CharacterCard\r\n              {...{\r\n                index,\r\n                name: char.name,\r\n                className: char.class,\r\n                level: char.level,\r\n                selected: index === charIndex,\r\n                toggleDialog,\r\n              }}\r\n              key={char.name}\r\n            />\r\n          ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CharacterList;\r\n","import React from \"react\";\r\nimport CharacterList from \"components/Character/CharacterList\";\r\nimport useDialog from \"components/Dialog/useDialog\";\r\nimport { DialogType } from \"components/Dialog/types\";\r\nimport styled from \"styled-components\";\r\n\r\nconst SidebarContainer = styled.div`\r\n  height: calc(100vh - 5rem);\r\n  box-shadow: 1px 4px 10px rgba(0, 0, 0, 0.25);\r\n`;\r\n\r\nconst Sidebar = () => {\r\n  const { renderDialog, toggleDialog } = useDialog();\r\n  return (\r\n    <SidebarContainer className=\" bottom-0 w-full left-0 relative shadow-xl flex flex-col items-center text-header-grey\">\r\n      {renderDialog()}\r\n      <div className=\"pt-6 w-full\">\r\n        <CharacterList />\r\n      </div>\r\n      <div\r\n        onClick={() => {\r\n          toggleDialog(DialogType.addCharacter);\r\n        }}\r\n        className=\"hover:bg-accent-grey hover:text-white absolute bottom-2 w-4/5 h-14 text-center flex items-center justify-center cursor-pointer p-2 border-2 border-accent-grey rounded-md\"\r\n      >\r\n        <p>Add Character</p>\r\n      </div>\r\n    </SidebarContainer>\r\n  );\r\n};\r\n\r\nexport default Sidebar;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { deleteChecklistItem, updateChecklistItem } from \"redux/stateSlice\";\r\nimport { useAppDispatch } from \"redux/hooks\";\r\nimport styled from \"styled-components\";\r\ninterface ChecklistItemProps {\r\n  field: string;\r\n  value: boolean;\r\n}\r\n\r\nconst StyledLabel = styled.label`\r\n  width: 75%;\r\n  &:hover .hover-target {\r\n    visibility: visible;\r\n  }\r\n`;\r\n\r\nconst ChecklistItem: React.FC<ChecklistItemProps> = ({ field, value }) => {\r\n  const [checked, setChecked] = useState(false);\r\n  const dispatch = useAppDispatch();\r\n\r\n  useEffect(() => {\r\n    setChecked(value);\r\n  }, [value]);\r\n  return (\r\n    <div key={field} className=\"\">\r\n      <StyledLabel className=\"flex items-center h-8 cursor-pointer justify-between hover:bg-gray-50\">\r\n        <div className=\"inline-flex items-center\">\r\n          <input\r\n            type=\"checkbox\"\r\n            className=\"rounded text-pink-500 cursor-pointer\"\r\n            checked={checked}\r\n            onChange={(e) => {\r\n              setChecked(e.target.checked);\r\n              dispatch(updateChecklistItem({ field }));\r\n            }}\r\n          />\r\n          <span className=\"ml-2\">{field}</span>\r\n        </div>\r\n        <img\r\n          onClick={() => {\r\n            dispatch(deleteChecklistItem({ field }));\r\n          }}\r\n          src={`${process.env.PUBLIC_URL}/exit.svg`}\r\n          className={`h-4 w-4 m-1 hover:bg-blue-200 hover-target invisible`}\r\n          alt=\"exit\"\r\n        />\r\n      </StyledLabel>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChecklistItem;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useAppDispatch } from \"redux/hooks\";\r\nimport { deleteChecklistItem } from \"redux/stateSlice\";\r\nimport styled from \"styled-components\";\r\n\r\ninterface SubChecklistProps {\r\n  field: string;\r\n  heading: string;\r\n  value: boolean;\r\n  globalChecked: boolean;\r\n  onChangeHandler: (field: string, value: boolean) => void;\r\n}\r\n\r\nconst StyledLabel = styled.label`\r\n  width: 100%;\r\n  &:hover .hover-target {\r\n    visibility: visible;\r\n  }\r\n`;\r\n\r\nconst SubChecklistItem: React.FC<SubChecklistProps> = ({\r\n  heading,\r\n  field,\r\n  globalChecked,\r\n  value,\r\n  onChangeHandler,\r\n}) => {\r\n  const [checked, setChecked] = useState(false);\r\n  const dispatch = useAppDispatch();\r\n  useEffect(() => {\r\n    setChecked(globalChecked);\r\n  }, [globalChecked]);\r\n\r\n  useEffect(() => {\r\n    setChecked(value);\r\n  }, [value]);\r\n  return (\r\n    <div>\r\n      <StyledLabel className=\"inline-flex items-center h-8 cursor-pointer justify-between hover:bg-gray-50\">\r\n        <div className=\"inline-flex items-center\">\r\n          <input\r\n            type=\"checkbox\"\r\n            className=\"rounded text-pink-500 cursor-pointer\"\r\n            checked={checked}\r\n            onChange={(e) => {\r\n              console.log(e.target.checked);\r\n              setChecked(e.target.checked);\r\n              onChangeHandler(field, e.target.checked);\r\n            }}\r\n          />\r\n          <span className=\"ml-2 w-full\">{field}</span>\r\n        </div>\r\n        <img\r\n          onClick={() => {\r\n            dispatch(deleteChecklistItem({ field, heading }));\r\n          }}\r\n          src={`${process.env.PUBLIC_URL}/exit.svg`}\r\n          className={`h-4 w-4 m-1 hover:bg-blue-200 hover-target invisible`}\r\n          alt=\"exit\"\r\n        />\r\n      </StyledLabel>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SubChecklistItem;\r\n","import React, { useState } from \"react\";\r\nimport { Checklist } from \"types\";\r\nimport SubChecklistItem from \"components/Checklist/SubChecklistItem\";\r\nimport { useAppDispatch } from \"redux/hooks\";\r\nimport {\r\n  addSubChecklistItem,\r\n  deleteChecklistItem,\r\n  updateSubChecklist,\r\n} from \"redux/stateSlice\";\r\nimport { isEmpty, mapValues } from \"lodash\";\r\nimport styled from \"styled-components\";\r\n\r\ninterface ChecklistProps {\r\n  label: string;\r\n  checklist: Checklist;\r\n}\r\n\r\nconst StyledLabel = styled.div`\r\n  width: 100%;\r\n  &:hover .hover-target {\r\n    visibility: visible;\r\n  }\r\n`;\r\n\r\nconst SubChecklist: React.FC<ChecklistProps> = ({ checklist, label }) => {\r\n  const [allChecked, setAllChecked] = useState(false);\r\n  const [isAdding, setIsAdding] = useState(false);\r\n  const dispatch = useAppDispatch();\r\n  const onChangeHandler = (field: string, value: boolean) => {\r\n    console.log(\"On change: \", field, value);\r\n    dispatch(\r\n      updateSubChecklist({\r\n        field: label,\r\n        data: { ...checklist, [field]: value },\r\n      })\r\n    );\r\n  };\r\n\r\n  const changeAllFields = (value: boolean) => {\r\n    console.log(\"Change all\");\r\n    dispatch(\r\n      updateSubChecklist({\r\n        field: label,\r\n        data: mapValues(checklist, () => value),\r\n      })\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <StyledLabel className=\"inline-flex items-center h-8 justify-between\">\r\n        <div className=\"inline-flex items-center\">\r\n          <input\r\n            type=\"checkbox\"\r\n            className=\"rounded text-pink-500 cursor-pointer\"\r\n            checked={allChecked}\r\n            onChange={(e) => {\r\n              setAllChecked(e.target.checked);\r\n              changeAllFields(e.target.checked);\r\n            }}\r\n          />\r\n          <span className=\"ml-2\">{label}</span>\r\n        </div>\r\n        <div className=\"inline-flex items-end gap-1\">\r\n          <img\r\n            onClick={() => {\r\n              setIsAdding(!isAdding);\r\n            }}\r\n            src={`${process.env.PUBLIC_URL}/add.svg`}\r\n            className={`h-4 w-4 hover:bg-blue-200 hover-target invisible cursor-pointer `}\r\n            alt=\"add\"\r\n          />\r\n          <img\r\n            onClick={() => {\r\n              dispatch(deleteChecklistItem({ field: label }));\r\n            }}\r\n            src={`${process.env.PUBLIC_URL}/exit.svg`}\r\n            className={`h-4 w-4 hover:bg-blue-200 hover-target invisible`}\r\n            alt=\"exit\"\r\n          />\r\n        </div>\r\n      </StyledLabel>\r\n      <div className=\"ml-6\">\r\n        {Object.entries(checklist).map(([field, value]) => {\r\n          if (typeof value === \"boolean\") {\r\n            return (\r\n              <SubChecklistItem\r\n                {...{\r\n                  heading: label,\r\n                  field,\r\n                  value,\r\n                  globalChecked: allChecked,\r\n                  onChangeHandler,\r\n                }}\r\n                key={field}\r\n              />\r\n            );\r\n          } else {\r\n            return undefined;\r\n          }\r\n        })}\r\n      </div>\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Add checklist item...\"\r\n        onKeyDown={(e) => {\r\n          if (e.key === \"Enter\") {\r\n            const value = e.currentTarget.value;\r\n            if (!isEmpty(value)) {\r\n              dispatch(\r\n                addSubChecklistItem({\r\n                  heading: label,\r\n                  field: e.currentTarget.value,\r\n                })\r\n              );\r\n              e.currentTarget.value = \"\";\r\n              setIsAdding(false);\r\n            }\r\n          }\r\n        }}\r\n        className={`ml-10 ${\r\n          isAdding ? \"block\" : \"hidden\"\r\n        } border-0 border-gray-300 border-b-2 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50`}\r\n      ></input>\r\n    </div>\r\n  );\r\n};\r\ninterface ChecklistProps {\r\n  checklist: Checklist;\r\n}\r\n\r\nexport default SubChecklist;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport ChecklistItem from \"components/Checklist/ChecklistItem\";\r\nimport SubChecklist from \"components/Checklist/SubChecklist\";\r\nimport { useAppDispatch, useAppSelector } from \"redux/hooks\";\r\nimport {\r\n  addChecklistItem,\r\n  addSubChecklist,\r\n  selectChecklist,\r\n  selectChecklistType,\r\n} from \"redux/stateSlice\";\r\nimport styled from \"styled-components\";\r\nimport { isEmpty } from \"lodash\";\r\nimport { Checklist, ChecklistType } from \"types\";\r\n\r\nconst StyledContainer = styled.div`\r\n  box-shadow: 1px 1px 5px rgba(0, 0, 0, 0.25);\r\n  height: 100%;\r\n  overflow-y: auto;\r\n`;\r\n\r\nconst ChecklistRenderer: React.FC = () => {\r\n  const checklistType = useAppSelector(selectChecklistType);\r\n  const checklist = useAppSelector(selectChecklist);\r\n  const dispatch = useAppDispatch();\r\n  const [list, setList] = useState<JSX.Element[]>([]);\r\n  const [categoryList, setCategoryList] = useState<JSX.Element[]>([]);\r\n\r\n  useEffect(() => {\r\n    const tempList: JSX.Element[] = [];\r\n    const tempCategoryList: JSX.Element[] = [];\r\n    Object.entries(checklist[checklistType]).forEach(([field, value]) => {\r\n      if (typeof value !== \"boolean\") {\r\n        tempCategoryList.push(\r\n          <SubChecklist label={field} checklist={value} key={field} />\r\n        );\r\n      } else {\r\n        tempList.push(<ChecklistItem {...{ field, value }} key={field} />);\r\n      }\r\n    });\r\n    setList(tempList);\r\n    setCategoryList(tempCategoryList);\r\n  }, [checklist, checklistType]);\r\n  const renderHeader = () => {\r\n    switch (checklistType) {\r\n      case ChecklistType.dailyChecklist:\r\n        return \"Daily Checklist\";\r\n      case ChecklistType.shiftChecklist:\r\n        return \"Shift Checklist\";\r\n      case ChecklistType.weeklyBosses:\r\n        return \"Weekly Bosses\";\r\n    }\r\n  };\r\n  return (\r\n    <StyledContainer className=\"container w-full flex flex-col text-lg p-6 \">\r\n      <h2 className=\"text-2xl sm:text-4xl lg:text-5xl leading-none font-bold text-gray-900 tracking-tight mb-5\">\r\n        {renderHeader()}\r\n      </h2>\r\n      <div className=\"grid grid-cols-2\">\r\n        <div>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Add checklist item..\"\r\n            onKeyDown={(e) => {\r\n              if (e.key === \"Enter\") {\r\n                const value = e.currentTarget.value;\r\n                if (!isEmpty(value)) {\r\n                  dispatch(addChecklistItem(e.currentTarget.value));\r\n                  e.currentTarget.value = \"\";\r\n                }\r\n              }\r\n            }}\r\n            className=\"mb-1 block border-0 border-gray-300 border-b-2 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50\"\r\n          />\r\n          {list}\r\n        </div>\r\n        <div>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Add category...\"\r\n            onKeyDown={(e) => {\r\n              if (e.key === \"Enter\") {\r\n                const value = e.currentTarget.value;\r\n                if (!isEmpty(value)) {\r\n                  dispatch(addSubChecklist(e.currentTarget.value));\r\n                  e.currentTarget.value = \"\";\r\n                }\r\n              }\r\n            }}\r\n            className=\"block border-0 border-gray-300 border-b-2 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50\"\r\n          />\r\n          {categoryList}\r\n        </div>\r\n      </div>\r\n    </StyledContainer>\r\n  );\r\n};\r\n\r\nexport default ChecklistRenderer;\r\n","import { differenceInMilliseconds } from \"date-fns\";\r\ninterface TimeLeft {\r\n  days: number;\r\n  hours: number | string;\r\n  minutes: number | string;\r\n  seconds: number | string;\r\n}\r\n\r\nconst calculateTimeLeft = (resetDate: Date) => {\r\n  const currentDate = new Date();\r\n  const difference = differenceInMilliseconds(resetDate, currentDate);\r\n  return {\r\n    days: Math.floor(difference / (1000 * 60 * 60 * 24)),\r\n    hours: Math.floor((difference / (1000 * 60 * 60)) % 24),\r\n    minutes: Math.floor((difference / 1000 / 60) % 60),\r\n    seconds: Math.floor((difference / 1000) % 60),\r\n  };\r\n};\r\nconst formatToDate = (timeLeft: TimeLeft) => {\r\n  let { hours, minutes, seconds } = timeLeft;\r\n  if (hours < 10) {\r\n    hours = \"0\" + hours;\r\n  }\r\n  if (minutes < 10) {\r\n    minutes = \"0\" + minutes;\r\n  }\r\n  if (seconds < 10) {\r\n    seconds = \"0\" + seconds;\r\n  }\r\n  return `${hours}:${minutes}:${seconds}`;\r\n};\r\n\r\nexport { calculateTimeLeft, formatToDate };\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { endOfToday } from \"date-fns\";\r\nimport { calculateTimeLeft, formatToDate } from \"helpers/timeFunctions\";\r\n\r\nconst Timer: React.FC = () => {\r\n  const [timeUntilDailyReset, setTimeUntilDailyReset] = useState(\r\n    calculateTimeLeft(endOfToday())\r\n  );\r\n  useEffect(() => {\r\n    const timer = setTimeout(() => {\r\n      setTimeUntilDailyReset(calculateTimeLeft(endOfToday()));\r\n    }, 1000);\r\n    return () => clearTimeout(timer);\r\n  });\r\n  return (\r\n    <div className=\"p-6\">\r\n      <h2 className=\"text-xl sm:text-2xl lg:text-5xl leading-none font-bold text-gray-900 tracking-tight mb-5\">\r\n        Timers\r\n      </h2>\r\n      <p className=\"text-sm sm:text-base lg:text-lg\">\r\n        {`Today's Reset - ${formatToDate(timeUntilDailyReset)}`}\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Timer;\r\n","import React from \"react\";\r\nimport {\r\n  clearExistingChecklist,\r\n  clearCharacterChecklist,\r\n} from \"redux/stateSlice\";\r\nimport { useAppDispatch } from \"redux/hooks\";\r\nimport useDialog from \"components/Dialog/useDialog\";\r\nimport { DialogType } from \"components/Dialog/types\";\r\nimport ReactTooltip from \"react-tooltip\";\r\nimport \"styles/tooltip.css\";\r\n\r\nconst TooltipProps = {\r\n  type: \"info\",\r\n  className: \"tooltip\",\r\n  arrowColor: \"#0c0c0fdd\",\r\n};\r\n\r\nconst ButtonBar = () => {\r\n  const dispatch = useAppDispatch();\r\n  const { renderDialog, toggleDialog } = useDialog();\r\n\r\n  return (\r\n    <div className=\"p2 sm:p-3 lg:p-6 flex flex-col items-center gap-3 text-xs sm:text-sm lg:text-base\">\r\n      {renderDialog()}\r\n      <div\r\n        onClick={() => {\r\n          toggleDialog(DialogType.resetAllChecklists);\r\n        }}\r\n        data-tip\r\n        data-for=\"reset-all-checklists\"\r\n        className=\"w-full lg:w-4/5 h-10 text-center flex items-center justify-center cursor-pointer p-2 border-2 border-accent-grey rounded-md hover:ring-2\"\r\n      >\r\n        Reset All Checklists\r\n      </div>\r\n      <div\r\n        onClick={() => {\r\n          dispatch(clearExistingChecklist());\r\n        }}\r\n        data-tip\r\n        data-for=\"clear-checklist\"\r\n        className=\"w-full lg:w-4/5 h-10 text-center flex items-center justify-center cursor-pointer p-2 border-2 border-accent-grey rounded-md hover:ring-2\"\r\n      >\r\n        Clear Checklist\r\n      </div>\r\n      <div\r\n        onClick={() => {\r\n          dispatch(clearCharacterChecklist());\r\n        }}\r\n        data-tip\r\n        data-for=\"clear-current-checklists\"\r\n        className=\"w-full lg:w-4/5 h-10 text-center flex items-center justify-center cursor-pointer p-2 border-2 border-accent-grey rounded-md hover:ring-2\"\r\n      >\r\n        Clear All Checklist\r\n      </div>\r\n\r\n      <ReactTooltip id=\"reset-all-checklists\" {...{ TooltipProps }}>\r\n        <span>\r\n          Click this button to reset all character's checklists to the original\r\n          checklist. <br /> This will wipe any custom checklists\r\n        </span>\r\n      </ReactTooltip>\r\n      <ReactTooltip id=\"clear-checklist\" {...{ TooltipProps }}>\r\n        <span>Unchecks all the boxes in the currently viewed checklist</span>\r\n      </ReactTooltip>\r\n      <ReactTooltip id=\"clear-current-checklists\" {...{ TooltipProps }}>\r\n        <span>\r\n          Unchecks all boxes in all checklists for the current character\r\n        </span>\r\n      </ReactTooltip>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ButtonBar;\r\n","import React from 'react'\r\nimport ChecklistRenderer from 'components/Checklist/ChecklistRenderer'\r\nimport Timer from 'components/Timer'\r\nimport styled from 'styled-components'\r\nimport ButtonBar from './ButtonBar'\r\n\r\nconst StyledCard = styled.div`\r\n    box-shadow: 1px 1px 5px rgba(0, 0, 0, 0.25);\r\n`;\r\n\r\nconst ContentContainer = () => {\r\n\r\n    return (\r\n        <div className=\"py-10 sm:pr-10 lg:pr-36 relative grid grid-cols-mainLayout grid-rows-2\">\r\n            <div className=\"row-span-2 mx-10\">\r\n                <ChecklistRenderer />\r\n            </div>\r\n            <StyledCard className=\"mb-10\">\r\n                <Timer />\r\n            </StyledCard>\r\n            <StyledCard>\r\n                <ButtonBar />\r\n            </StyledCard>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ContentContainer\r\n","import React from \"react\";\r\nimport Header from \"components/Header\";\r\nimport Sidebar from \"components/Sidebar\";\r\nimport styled from \"styled-components\";\r\nimport ContentContainer from \"components/ContentContainer\";\r\n\r\nconst Container = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 20% auto;\r\n  width: 100vw;\r\n`;\r\n\r\nconst MainPage = () => {\r\n  return (\r\n    <div className=\"h-screen\">\r\n      <Header />\r\n      <Container className=\"pt-20\">\r\n        <Sidebar />\r\n        <ContentContainer />\r\n      </Container>\r\n    </div>\r\n  );\r\n};\r\nexport default MainPage;\r\n","import { configureStore } from '@reduxjs/toolkit'\r\nimport stateSlice from 'redux/stateSlice'\r\n\r\n\r\nconst store = configureStore({\r\n  reducer: stateSlice\r\n})\r\n\r\n// Infer the `RootState` and `AppDispatch` types from the store itself\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppDispatch = typeof store.dispatch;\r\nexport default store;\r\n","import AppRouter from \"pages/AppRouter\";\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"redux/store\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <Provider store={store}>\r\n        <AppRouter />\r\n      </Provider>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"App\";\r\nimport \"styles/base.css\";\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}