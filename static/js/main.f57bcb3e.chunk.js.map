{"version":3,"sources":["types.ts","redux/hooks.ts","config/checklists.ts","components/Dialog/types.ts","redux/stateSlice.ts","redux/helpers.ts","components/Dialog/AddCharacterDialog.tsx","components/Dialog/ConfirmDialog.tsx","components/Dialog/BaseDialog.tsx","components/Dialog/useDialog.tsx","components/Header.tsx","components/Character/CharacterCard.tsx","components/Character/CharacterList.tsx","components/Checklist/ChecklistItem.tsx","components/Checklist/SubChecklistItem.tsx","components/Checklist/SubChecklist.tsx","components/Checklist/ChecklistRenderer.tsx","pages/AppRouter.tsx","redux/store.ts","App.tsx","index.tsx"],"names":["ChecklistType","Class","useAppDispatch","useDispatch","useAppSelector","useSelector","checklist","DialogType","initialState","dailyChecklist","shiftChecklist","weeklyBosses","characters","characterIndex","checklistType","stateSlice","createSlice","name","reducers","updateChecklist","state","action","payload","updateCharList","setChecklistType","addChar","push","localStorage","setItem","JSON","stringify","current","updateChecklistItem","field","setCharIndex","charName","storage","parse","getItem","isEmpty","getChecklistByCharacterName","resetDailyChecklists","forEach","character","checklistBase","resetWeeklyChecklists","deleteCharacter","removeItem","splice","updateSubChecklist","data","actions","selectChecklist","selectChecklistType","selectCharacters","selectCharacterIndex","StyledForm","styled","div","AddPictureDialog","setDialogOpen","setIsLoading","setIsError","setErrorMsg","useState","setName","magician","job","setJob","level","setLevel","dispatch","className","type","maxLength","onChange","e","target","value","Object","keys","map","max","min","parseInt","onClick","class","ConfirmDialog","onConfirm","confirmMessage","BaseDialog","header","setHeader","charIndex","useEffect","addCharacter","deleteStorage","src","process","alt","AddCharacterDialog","clear","window","location","reload","renderContent","useDialog","dialogOpen","dialogType","setDialogType","toggleDialog","renderDialog","Header","CharacterCard","index","selected","CharacterList","charList","currentDate","utcToZonedTime","Date","lastCheckedDate","resetDate","setHours","lastLogin","toString","console","log","getHours","isBefore","isWednesday","toISOString","checkIfLastVisitedExpired","list","char","key","ChecklistItem","checked","setChecked","SubChecklistItem","globalChecked","onChangeHandler","SubChecklist","label","allChecked","setAllChecked","mapValues","entries","ChecklistRenderer","MainPage","store","configureStore","reducer","App","AppRouter","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f57bcb3e.chunk.js","sourcesContent":["interface Checklist {\r\n  [key: string]: boolean | Checklist;\r\n}\r\n\r\n\r\n\r\ninterface Character {\r\n  name: string;\r\n  class: Class;\r\n  level: number;\r\n}\r\n\r\nenum ChecklistType{\r\n  dailyChecklist = \"dailyChecklist\",\r\n  weeklyBosses = \"weeklyBosses\",\r\n  shiftChecklist = \"shiftChecklist\",\r\n}\r\n\r\ninterface FullChecklist {\r\n  dailyChecklist: Checklist;\r\n  weeklyBosses: Checklist;\r\n  shiftChecklist: Checklist;\r\n}\r\n\r\nenum Class {\r\n  magician = \"magician\",\r\n  thief = \"thief\",\r\n  warrior = \"warrior\",\r\n  bowman = \"bowman\",\r\n  pirate = \"pirate\",\r\n}\r\n\r\nexport type { Checklist, Character, FullChecklist };\r\nexport { Class, ChecklistType };\r\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux'\r\nimport { RootState, AppDispatch } from './store'\r\n\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>()\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector","import { FullChecklist } from \"types\";\r\n\r\nconst checklist: FullChecklist = {\r\n    \"dailyChecklist\": {\r\n        \"Arcane Dailies\": false,\r\n        \"Ursus\": false,\r\n        \"Maple Tour\": false,\r\n        \"Monster Park\": false,\r\n        \"Yu Garden\": false,\r\n        \"Gollux\": false,\r\n        \"Legion Quest\": false,\r\n        \"Bosses\": {\r\n            \"Zakum\": false,\r\n            \"Horntail\" : false,\r\n            \"Hila\": false,\r\n            \"Root Abyss\": false,\r\n            \"Von Leon\": false,\r\n            \"Arkarium\": false,\r\n            \"Magnus\": false,\r\n            \"Pink Bean\": false,\r\n            \"Ranmaru\": false,\r\n        },\r\n        \"Commerci\":{\r\n            \"Commerci PQ\": false,\r\n            \"Commerci Solo\": false\r\n        }\r\n    },\r\n    \"shiftChecklist\": {\r\n        \"Wealth Acquisition Potion\": false,\r\n        \"2x EXP\": false,\r\n        \"Legion\": false,\r\n        \"Familiars\": false,\r\n        \"Drop/Meso Gear\": false,\r\n        \"Wild Totem\": false,\r\n        \"Additional EXP Shit\": false,\r\n        \"Link Skill Review\": false,\r\n        \"Legion Board Review\": false,\r\n        \"Pets\": false\r\n    },\r\n    \"weeklyBosses\": {\r\n        \"Hard Magnus\": false,\r\n        \"Chaos Zakum\": false,\r\n        \"Hard Hila\": false,\r\n        \"Chao Pink Bean\": false,\r\n        \"Chaos Root Abyss\": {\r\n            \"Chaos Queen\": false,\r\n            \"Chaos Von Bon\": false,\r\n            \"Chaos Pierre\": false,\r\n            \"Chaos Vellum\": false,\r\n        },\r\n        \"Chaos Papulatus\": false,\r\n        \"Princess No\": false,\r\n        \"Akechi\": false,\r\n        \"Lotus\": false,\r\n        \"Damien\": false,\r\n        \"Lucid\": false,\r\n        \"Verus Hila\": false\r\n    }\r\n}\r\n\r\nexport default checklist;","export enum DialogType{\r\n    deleteCharacter,\r\n    addCharacter,\r\n    deleteStorage,\r\n}","import { createSlice, current, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport checklistBase from \"config/checklists\";\r\nimport { Character, Checklist, ChecklistType, FullChecklist } from \"types\";\r\nimport { getChecklistByCharacterName } from \"redux/helpers\";\r\nimport { RootState } from \"./store\";\r\nimport { ChecklistUpdateData, State, SubChecklistData } from \"./types\";\r\n\r\nconst initialState: State = {\r\n  checklist: {\r\n    dailyChecklist: {},\r\n    shiftChecklist: {},\r\n    weeklyBosses: {},\r\n  },\r\n  characters: [],\r\n  characterIndex: 0,\r\n  checklistType: ChecklistType.dailyChecklist,\r\n}\r\n\r\nexport const stateSlice = createSlice({\r\n  name: \"state\",\r\n  initialState: initialState,\r\n  reducers: {\r\n    updateChecklist: (state, action: PayloadAction<FullChecklist>) => {\r\n      state.checklist = action.payload;\r\n    },\r\n    updateCharList: (state, action: PayloadAction<Array<Character>>) => {\r\n      state.characters = action.payload;\r\n    },\r\n    setChecklistType: (state, action: PayloadAction<ChecklistType>) => {\r\n      state.checklistType = action.payload;\r\n    },\r\n    addChar: (state, action: PayloadAction<Character>) => {\r\n      state.characters.push(action.payload);\r\n      localStorage.setItem(\"characters\", JSON.stringify(current(state).characters));\r\n    },\r\n    updateChecklistItem: (state, action: PayloadAction<ChecklistUpdateData>) => {\r\n      const { field } = action.payload;\r\n      const { checklistType, characters, checklist, characterIndex } = state;\r\n      state.checklist[checklistType][field] = !checklist[checklistType][field];\r\n      localStorage.setItem(characters[characterIndex].name, JSON.stringify(current(state).checklist));\r\n    },\r\n    setCharIndex: (state, action: PayloadAction<number>) => {\r\n      const { name } = state.characters[action.payload]\r\n      state.checklist = getChecklistByCharacterName(name);\r\n      state.characterIndex = action.payload;\r\n    },\r\n    resetDailyChecklists: (state) => {\r\n      state.characters.forEach((character) => {\r\n        localStorage.setItem(character.name, JSON.stringify({ ...checklistBase, dailyChecklist: checklistBase.dailyChecklist }))\r\n      })\r\n    },\r\n    resetWeeklyChecklists: (state) => {\r\n      state.characters.forEach((character) => {\r\n        const { weeklyBosses, dailyChecklist } = checklistBase;\r\n        localStorage.setItem(character.name, JSON.stringify({ ...checklistBase, weeklyBosses, dailyChecklist }))\r\n      })\r\n    },\r\n    deleteCharacter: (state, action: PayloadAction<number>) => {\r\n      const { name } = state.characters[action.payload];\r\n      localStorage.removeItem(name);\r\n      state.characters.splice(action.payload, 1);\r\n      localStorage.setItem('characters', JSON.stringify(current(state).characters));\r\n    },\r\n    updateSubChecklist: (state, action: PayloadAction<SubChecklistData>) => {\r\n      state.checklist[state.checklistType][action.payload.field] = action.payload.data;\r\n      localStorage.setItem(state.characters[state.characterIndex].name, JSON.stringify(current(state).checklist));\r\n    }\r\n  },\r\n});\r\n\r\nexport const {\r\n  updateChecklist,\r\n  setCharIndex,\r\n  updateCharList,\r\n  addChar,\r\n  updateChecklistItem,\r\n  resetDailyChecklists,\r\n  resetWeeklyChecklists,\r\n  setChecklistType,\r\n  deleteCharacter,\r\n  updateSubChecklist\r\n} = stateSlice.actions;\r\n\r\nexport const selectChecklist = (state: RootState) => state.checklist;\r\nexport const selectChecklistType = (state: RootState) => state.checklistType;\r\nexport const selectCharacters = (state: RootState) => state.characters;\r\nexport const selectCharacterIndex = (state: RootState) => state.characterIndex;\r\n\r\nexport default stateSlice.reducer;\r\n","import checklist from 'config/checklists';\r\nimport { isEmpty } from 'lodash';\r\n\r\nconst getChecklistByCharacterName = (charName: string) => {\r\n    const storage = JSON.parse(\r\n        //@ts-ignore\r\n        localStorage.getItem(charName)\r\n      );\r\n    if (!isEmpty(storage)) {\r\n        return storage;\r\n      } else {\r\n        localStorage.setItem(charName, JSON.stringify(checklist));\r\n        return checklist;\r\n      }\r\n}\r\n\r\n\r\nexport { getChecklistByCharacterName }","import React, { useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport { Class } from 'types';\r\nimport { addChar } from 'redux/stateSlice';\r\nimport { useAppDispatch } from 'redux/hooks';\r\n\r\ninterface DialogProps {\r\n    setDialogOpen: (arg: boolean) => void;\r\n    setIsLoading: (arg: boolean) => void;\r\n    setIsError: (arg: boolean) => void;\r\n    setErrorMsg: (arg: string) => void;\r\n}\r\n\r\nconst StyledForm = styled.div`\r\n    display: flex;\r\n    position: relative;\r\n    flex-direction: column; \r\n    width: 60%;\r\n    left: 50%;\r\n    transform: translate(-50%, 0%);\r\n`;\r\n\r\nconst AddPictureDialog: React.FC<DialogProps> = ({ setDialogOpen, setIsLoading, setIsError, setErrorMsg }) => {\r\n    const [name, setName] = useState(\"\");\r\n    const [job, setJob] = useState<Class>(Class.magician);\r\n    const [level, setLevel] = useState(0);\r\n    const dispatch = useAppDispatch();\r\n\r\n    return (\r\n        <StyledForm>\r\n            <label className=\"block\">\r\n                <span>Name</span>\r\n                <input type=\"text\" maxLength={12} onChange={(e) => { setName(e.target!.value) }} className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50\"></input>\r\n            </label>\r\n            <label className=\"block\">\r\n                <span>Class</span>\r\n                <select onChange={(e) => { setJob(Class[e.target!.value! as keyof typeof Class]) }} className=\"block w-full mt-1 rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50\">\r\n                    {\r\n                        Object.keys(Class).map((value) => {\r\n                            return (<option>{value}</option>)\r\n                        })\r\n                    }\r\n                </select>\r\n            </label>\r\n            <label className=\"block\">\r\n                <span>Number</span>\r\n                <input type=\"number\" max={300} min={0} onChange={(e) => {\r\n                    const value = parseInt(e.target.value);\r\n                    if (value > 300 || value < 0) {\r\n                        setLevel(0);\r\n                    } else {\r\n                        setLevel(value);\r\n                    }\r\n                    \r\n                }} value={level} className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50\" />\r\n            </label>\r\n            <button onClick={() => {\r\n                dispatch(addChar({ name, level, class: job }));\r\n                setDialogOpen(false);\r\n            }}\r\n                className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-full my-5\">\r\n                Add\r\n            </button>\r\n        </StyledForm>\r\n    )\r\n}\r\n\r\nexport default AddPictureDialog\r\n","import React  from 'react';\r\n\r\ninterface DialogProps {\r\n    setIsLoading: (arg: boolean) => void;\r\n    setIsError: (arg: boolean) => void;\r\n    setErrorMsg: (arg: string) => void;\r\n    onConfirm: ()=>void;\r\n    confirmMessage: string;\r\n}\r\n\r\n\r\nconst ConfirmDialog: React.FC<DialogProps> = ({ setIsLoading, setIsError, setErrorMsg, onConfirm, confirmMessage }) => {\r\n    return (\r\n        <div className=\"flex flex-col relative px-12 h-full content-center\">\r\n            <p className=\"text-2xl self-center text-center\">\r\n                {confirmMessage}\r\n            </p>\r\n            <button onClick={onConfirm}\r\n                className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-full my-5 cursor-pointer\">\r\n                Confirm\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ConfirmDialog;\r\n","import React, { useEffect, useState } from 'react'\r\nimport AddCharacterDialog from 'components/Dialog/AddCharacterDialog';\r\nimport ConfirmDeleteDialog from 'components/Dialog/ConfirmDialog';\r\nimport { DialogType } from 'components/Dialog/types';\r\nimport { deleteCharacter } from 'redux/stateSlice';\r\nimport { useAppDispatch, useAppSelector } from 'redux/hooks';\r\n\r\ninterface DialogProps {\r\n    setDialogOpen: (arg: boolean) => void;\r\n    type: DialogType;\r\n}\r\n\r\n\r\nconst BaseDialog: React.FC<DialogProps> = ({ setDialogOpen, type }) => {\r\n    const [header, setHeader] = useState(\"Dialog\");\r\n    const [isError, setIsError] = useState(false);\r\n    const [errorMsg, setErrorMsg] = useState(\"\");\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const charIndex = useAppSelector(state => state.characterIndex);\r\n    const dispatch = useAppDispatch();\r\n\r\n    useEffect(() => {\r\n        switch (type) {\r\n            case DialogType.addCharacter:\r\n                setHeader(\"Add Character\");\r\n                break;\r\n            case DialogType.deleteCharacter | DialogType.deleteStorage:\r\n                setHeader(\"Confirm Action\");\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }, [type])\r\n\r\n    const renderContent = () => {\r\n        switch (type) {\r\n            case DialogType.addCharacter:\r\n                return <AddCharacterDialog setDialogOpen={setDialogOpen} setIsError={setIsError} setErrorMsg={setErrorMsg} setIsLoading={setIsLoading} />\r\n            case DialogType.deleteCharacter:\r\n                return <ConfirmDeleteDialog {...{\r\n                    setIsError, setErrorMsg, setIsLoading,\r\n                    confirmMessage: \"Are you sure you want to delete this character?\",\r\n                    onConfirm: () => {\r\n                        dispatch(deleteCharacter(charIndex));\r\n                        setDialogOpen(false);\r\n                    }\r\n                }} ></ConfirmDeleteDialog>\r\n            case DialogType.deleteStorage:\r\n                return <ConfirmDeleteDialog {...{\r\n                    setIsError, setErrorMsg, setIsLoading,\r\n                    confirmMessage: \"Are you sure you want to wipe your character data?\",\r\n                    onConfirm: () => {\r\n                        localStorage.clear();\r\n                        setDialogOpen(false);\r\n                        window.location.reload();\r\n                    }\r\n                }} ></ConfirmDeleteDialog>\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"fixed h-full w-screen z-50 inset-0 bg-gray-300 bg-opacity-75 flex justify-center items-center\" >\r\n            <span className=\"relative inset-0 flex flex-col bg-white max-w-1/2 min-w-1/4 max-h-full rounded-lg text-black\">\r\n                <p className=\"underline text-center h-18 text-2xl font-bold p-5\">{header}</p>\r\n                <img onClick={() => setDialogOpen(false)} src={`${process.env.PUBLIC_URL}/exit.svg`} className=\"absolute top-0 right-0 h-4 w-4 m-3 hover:bg-blue-200\" alt=\"exit\" />\r\n                {renderContent()}\r\n            </span>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default BaseDialog\r\n","import React, { useState } from 'react';\r\nimport BaseDialog from 'components/Dialog/BaseDialog';\r\nimport { DialogType } from './types';\r\n\r\n\r\nconst useDialog = () => {\r\n    const [dialogOpen, setDialogOpen] = useState(false);\r\n    const [dialogType, setDialogType] = useState<DialogType>(DialogType.deleteCharacter)\r\n    const renderDialog = () => {\r\n        return dialogOpen && <BaseDialog setDialogOpen={setDialogOpen} type={dialogType}></BaseDialog>\r\n    }\r\n    const toggleDialog = (type: DialogType)=>{\r\n        setDialogOpen(!dialogOpen);\r\n        setDialogType(type)\r\n    }\r\n    return (\r\n        {\r\n            toggleDialog, renderDialog\r\n        }\r\n    )\r\n}\r\n\r\nexport default useDialog\r\n","import React from 'react'\r\nimport { useAppDispatch } from 'redux/hooks';\r\nimport { setChecklistType } from 'redux/stateSlice';\r\nimport { ChecklistType } from 'types';\r\nimport useDialog from 'components/Dialog/useDialog';\r\nimport { DialogType } from './Dialog/types';\r\n\r\nconst Header = () => {\r\n    const dispatch = useAppDispatch();\r\n    const {renderDialog,toggleDialog} = useDialog();\r\n    return (\r\n        <div className=\"sticky top-0 z-30 h-14 px-36 flex-1 min-w-full flex items-center container bg-purple-500 text-white\">\r\n            {renderDialog()}\r\n            <img src={`${process.env.PUBLIC_URL}/maplestory-icon.png`} alt=\"Icon\" className=\"w-7 h-7\"/>\r\n            <p className=\"text-xl\">\r\n                Maplelist\r\n            </p>\r\n            <div onClick={() => { dispatch(setChecklistType(ChecklistType.dailyChecklist)) }} className=\"bg-purple-500 hover:bg-purple-700 text-white px-3 py-2 rounded-md text-lg ml-20 cursor-pointer\">\r\n                Dailies\r\n            </div>\r\n            <div onClick={() => { dispatch(setChecklistType(ChecklistType.weeklyBosses)) }} className=\"bg-purple-500 hover:bg-purple-700 text-white px-3 py-2 rounded-md text-lg ml-5 cursor-pointer\">\r\n                Weeklies\r\n            </div>\r\n            <div onClick={() => { dispatch(setChecklistType(ChecklistType.shiftChecklist)) }} className=\"bg-purple-500 hover:bg-purple-700 text-white px-3 py-2 rounded-md text-lg ml-5 cursor-pointer\">\r\n                Shift\r\n            </div>\r\n            <div onClick={()=>{\r\n                toggleDialog(DialogType.deleteStorage);\r\n            }} className=\"bg-purple-500 hover:bg-purple-700 text-white px-3 py-2 rounded-md text-lg ml-5 cursor-pointer\">\r\n                Clear Character Data\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","import React from 'react'\r\nimport { useAppDispatch } from 'redux/hooks';\r\nimport { setCharIndex } from 'redux/stateSlice';\r\nimport { Class } from 'types'\r\nimport { DialogType } from 'components/Dialog/types';\r\ninterface CharacterProps {\r\n    name: string;\r\n    className: Class;\r\n    level: number;\r\n    index: number;\r\n    selected?: boolean;\r\n    toggleDialog: (type: DialogType) => void;\r\n}\r\n\r\n\r\nconst CharacterCard: React.FC<CharacterProps> = ({ className, level, name, index, selected, toggleDialog }) => {\r\n    const dispatch = useAppDispatch();\r\n\r\n    return (\r\n        <div className={`relative cursor-pointer border-blue-400 border rounded-lg flex items-center ${selected ? \"text-white bg-blue-400\" : \"\"}`} onClick={() => dispatch(setCharIndex(index))}>\r\n            <img className=\" w-12 h-12 m-2 rounded-full ring-1 blue-500\" src={`${process.env.PUBLIC_URL}/${Class[className]}.svg`} alt={`${Class[className]}`} />\r\n            <div className=\"pr-2\">\r\n                <p>{name}</p>\r\n                <p>{level}</p>\r\n            </div>\r\n            <img onClick={() => { toggleDialog(DialogType.deleteCharacter) }} src={`${process.env.PUBLIC_URL}/exit.svg`} className={`absolute top-0 right-0 h-2 w-2 m-1 hover:bg-blue-200 ${selected ? \"\" : \"\"}`} alt=\"exit\" />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CharacterCard\r\n","import React, { useEffect } from 'react';\r\nimport { updateCharList, resetDailyChecklists, resetWeeklyChecklists, selectCharacters, selectCharacterIndex } from 'redux/stateSlice';\r\nimport { useAppSelector, useAppDispatch } from 'redux/hooks';\r\nimport { isEmpty } from 'lodash';\r\nimport useDialog from 'components/Dialog/useDialog';\r\nimport CharacterCard from 'components/Character/CharacterCard';\r\nimport { DialogType } from 'components/Dialog/types';\r\nimport { utcToZonedTime } from 'date-fns-tz';\r\nimport { getHours, isThursday, isWednesday, setHours } from 'date-fns';\r\nimport { isBefore } from 'date-fns/fp';\r\n\r\nconst CharacterList: React.FC = () => {\r\n    const charList = useAppSelector(selectCharacters);\r\n    const charIndex = useAppSelector(selectCharacterIndex);\r\n    const dispatch = useAppDispatch();\r\n    const { renderDialog, toggleDialog } = useDialog();\r\n\r\n    const checkIfLastVisitedExpired = () => {\r\n        const currentDate = utcToZonedTime(new Date(), \"America/New_York\")\r\n        const lastCheckedDate = localStorage.getItem(\"lastVisited\");\r\n        if (lastCheckedDate) {\r\n            const resetDate = setHours(currentDate, 19);\r\n            const lastLogin = utcToZonedTime(lastCheckedDate!.toString(), \"America/New_York\");\r\n            console.log(lastLogin);\r\n            console.log(currentDate, getHours(currentDate));\r\n            console.log(resetDate);\r\n            if (getHours(currentDate) >= 19 && isBefore(lastLogin, resetDate)) {\r\n                console.log(\"Checklists should reset\")\r\n                if (isWednesday(currentDate)) {\r\n                    dispatch(resetWeeklyChecklists());\r\n                    console.log(\"reset weekly\")\r\n                } else {\r\n                    dispatch(resetDailyChecklists());\r\n                    console.log(\"Reset daily\");\r\n                }\r\n            }\r\n        }\r\n        localStorage.setItem(\"lastVisited\", currentDate.toISOString());\r\n    }\r\n\r\n    useEffect(() => {\r\n        checkIfLastVisitedExpired();\r\n        const list = localStorage.getItem(\"characters\");\r\n        if (!isEmpty(list)) {\r\n            dispatch(updateCharList(JSON.parse(list!.toString())))\r\n        }\r\n    }, [])\r\n\r\n    return (\r\n        <div className=\"grid grid-rows-1 grid-cols-2\">\r\n            {renderDialog()}\r\n            <div className=\"flex items-center py-5 gap-x-4\">\r\n                {charList && charList.map((char, index) => (\r\n                    <CharacterCard {...{ index, name: char.name, className: char.class, level: char.level, selected: index === charIndex, toggleDialog }} key={char.name} />\r\n                ))}\r\n            </div>\r\n            <button onClick={() => { toggleDialog(DialogType.addCharacter) }} className=\"col-start-2 bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-full my-5 w-40 place-self-end self-start\">\r\n                Add Character\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CharacterList\r\n","import React, { useEffect, useState } from 'react'\r\nimport { updateChecklistItem } from 'redux/stateSlice';\r\nimport { useAppDispatch } from 'redux/hooks';\r\ninterface ChecklistItemProps {\r\n    field: string;\r\n    value: boolean;\r\n}\r\n\r\nconst ChecklistItem: React.FC<ChecklistItemProps> = ({ field, value }) => {\r\n    const [checked, setChecked] = useState(false);\r\n    const dispatch = useAppDispatch();\r\n\r\n    useEffect(() => {\r\n        setChecked(value);\r\n    }, [value])\r\n    return (\r\n        <div key={field}>\r\n            <label className=\"inline-flex items-center h-8 cursor-pointer\">\r\n            <input type=\"checkbox\" className=\"rounded text-pink-500\" checked={checked} onChange={(e) => {\r\n                setChecked(e.target.checked);\r\n                dispatch(updateChecklistItem({field}));\r\n            }} />\r\n            <span className=\"ml-2\">{field}</span>\r\n            </label>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ChecklistItem\r\n","import React, { useEffect, useState } from 'react'\r\n\r\ninterface SubChecklistProps {\r\n    field: string;\r\n    value: boolean;\r\n    globalChecked: boolean;\r\n    onChangeHandler: (field: string, value: boolean) => void;\r\n}\r\n\r\nconst SubChecklistItem: React.FC<SubChecklistProps> = ({ field, globalChecked, value, onChangeHandler }) => {\r\n    const [checked, setChecked] = useState(false);\r\n\r\n    useEffect(() => {\r\n        setChecked(globalChecked);\r\n    }, [globalChecked])\r\n\r\n    useEffect(() => {\r\n        setChecked(value);\r\n    }, [value])\r\n    return (\r\n        <div>\r\n            <label className=\"inline-flex items-center h-8 cursor-pointer\">\r\n                <input type=\"checkbox\" className=\"rounded text-pink-500\" checked={checked} onChange={(e) => {\r\n                    console.log(e.target.checked)\r\n                    setChecked(e.target.checked);\r\n                    onChangeHandler(field, e.target.checked);\r\n                }} />\r\n                <span className=\"ml-2\">{field}</span>\r\n            </label>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SubChecklistItem\r\n","import React, { useState } from 'react'\r\nimport { Checklist } from 'types'\r\nimport SubChecklistItem from 'components/Checklist/SubChecklistItem';\r\nimport { useAppDispatch } from 'redux/hooks';\r\nimport { updateSubChecklist } from 'redux/stateSlice';\r\nimport { mapValues } from 'lodash';\r\ninterface ChecklistProps {\r\n    label: string;\r\n    checklist: Checklist;\r\n}\r\n\r\nconst SubChecklist: React.FC<ChecklistProps> = ({ checklist, label }) => {\r\n    const [allChecked, setAllChecked] = useState(false);\r\n    const dispatch = useAppDispatch();\r\n    const onChangeHandler = (field: string, value: boolean) => {\r\n        console.log(\"On change: \", field, value);\r\n        dispatch(updateSubChecklist({ field: label, data: { ...checklist, [field]: value } }));\r\n    }\r\n\r\n    const changeAllFields = (value: boolean) => {\r\n        console.log(\"Change all\")\r\n        dispatch(updateSubChecklist({ field: label, data: mapValues(checklist, () => value) }));\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <label className=\"inline-flex items-center h-8 cursor-pointer\">\r\n                <input type=\"checkbox\" className=\"rounded text-pink-500\" checked={allChecked} onChange={(e) => {\r\n                    setAllChecked(e.target.checked);\r\n                    changeAllFields(e.target.checked);\r\n                }} />\r\n                <span className=\"ml-2\">{label}</span>\r\n            </label>\r\n            <div className=\"ml-10\">\r\n                {\r\n                    Object.entries(checklist).map(([field, value]) => {\r\n                        if (typeof value === 'boolean') {\r\n                            return <SubChecklistItem {...{ field, value, globalChecked: allChecked, onChangeHandler }} key={field} />\r\n                        } else {\r\n                            return undefined;\r\n                        }\r\n                    })\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\ninterface ChecklistProps {\r\n    checklist: Checklist;\r\n}\r\n\r\nexport default SubChecklist\r\n","import React from 'react';\r\nimport ChecklistItem from 'components/Checklist/ChecklistItem';\r\nimport SubChecklist from 'components/Checklist/SubChecklist';\r\nimport { useAppSelector } from 'redux/hooks';\r\nimport { selectChecklist, selectChecklistType } from 'redux/stateSlice';\r\n\r\n\r\n\r\nconst ChecklistRenderer: React.FC = () => {\r\n    const checklistType = useAppSelector(selectChecklistType);\r\n    const checklist = useAppSelector(selectChecklist);\r\n    return (\r\n        <div className=\"container w-full flex flex-col text-lg\">\r\n            {\r\n                Object.entries(checklist[checklistType]).map(([field, value]) => {\r\n                    if (typeof value !== 'boolean') {\r\n                        return <SubChecklist label={field} checklist={value} key={field} />\r\n                    } else {\r\n                        return (\r\n                            <ChecklistItem {...{ field, value }} key={field} />\r\n                        )\r\n                    }\r\n\r\n                })\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ChecklistRenderer\r\n","import React from 'react'\r\nimport Header from 'components/Header';\r\nimport CharacterList from 'components/Character/CharacterList';\r\nimport ChecklistRenderer from '../components/Checklist/ChecklistRenderer';\r\n\r\nconst MainPage = () => {\r\n\r\n    return (\r\n        <div>\r\n                <Header />\r\n                <div className=\"lg:z-50 max-w-8xl px-36 container min-w-full h-screen\">\r\n                    <CharacterList />\r\n                    <ChecklistRenderer/>\r\n                </div>\r\n        </div>\r\n    )\r\n}\r\nexport default MainPage;\r\n","import { configureStore } from '@reduxjs/toolkit'\r\nimport stateSlice from 'redux/stateSlice'\r\n\r\n\r\nconst store = configureStore({\r\n  reducer: stateSlice\r\n})\r\n\r\n// Infer the `RootState` and `AppDispatch` types from the store itself\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppDispatch = typeof store.dispatch;\r\nexport default store;\r\n","import AppRouter from \"pages/AppRouter\";\r\nimport { Provider } from 'react-redux';\r\nimport store from 'redux/store';\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <Provider store={store}>\r\n        <AppRouter />\r\n      </Provider>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom'\r\nimport App from 'App';\r\nimport 'styles/base.css';\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}